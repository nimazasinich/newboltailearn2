{
  "name": "iranian-legal-archive",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "description": "Persian Legal Document Archive System with AI Classification and Web Scraping",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "scripts": {
    "dev": "cross-env NODE_NO_WARNINGS=1 vite --config vite.config.ts",
    "build": "vite build --config vite.config.ts",
    "build:gh": "cross-env VITE_BASE_PATH=/newboltailearn/ vite build --config vite.config.ts && node scripts/make-404.js",
    "preview": "vite preview --config vite.config.ts",
    "start": "NODE_ENV=production PORT=8000 node server/main.js",
    "start:dev": "cross-env NODE_ENV=development PORT=8080 node server/main.js",
    "start:enhanced": "node simple-server.js",
    "start:real": "node integrated-server.js",
    "start:sophisticated": "node server/index.js",
    "test:enhanced": "node test-enhanced-app.js",
    "start:safe": "npm run check:permissions && npm run render:verify-abi && npm run start",
    "preinstall": "node -e \"console.log('Node:', process.version, 'ABI:', process.versions.modules)\"",
    "postinstall": "npm run verify:better-sqlite3 || npm run rebuild:better-sqlite3",
    "verify:better-sqlite3": "node -e \"try{require('better-sqlite3');console.log('✅ better-sqlite3 loaded successfully')}catch(e){console.error('❌ better-sqlite3 failed:',e.message);process.exit(1)}\"",
    "rebuild:better-sqlite3": "npm rebuild better-sqlite3 --build-from-source && npm run verify:better-sqlite3",
    "health-check": "node -e \"require('better-sqlite3'); console.log('Health: OK')\"",
    "render:clean-build": "rm -rf node_modules package-lock.json && npm cache clean --force && npm ci",
    "render:verify-abi": "node -e \"console.log('✅ Node:', process.version, 'ABI:', process.versions.modules); try{require('better-sqlite3'); console.log('✅ better-sqlite3: OK')}catch(e){console.error('❌ better-sqlite3:', e.message); process.exit(1)}\"",
    "check:permissions": "node -e \"const fs = require('fs'); const path = './data'; try { fs.mkdirSync(path, {recursive: true}); fs.accessSync(path, fs.constants.W_OK); console.log('✅ Write permissions OK'); } catch(e) { console.error('❌ Permission error:', e.message); process.exit(1); }\"",
    "lint": "eslint . --report-unused-disable-directives --max-warnings 0",
    "type-check": "tsc --noEmit --project tsconfig.app.json",
    "compile-server": "echo 'Server compilation not needed - using JS files directly'",
    "test": "vitest run",
    "test:unit": "vitest run tests/unit",
    "audit:routes": "ts-node --transpile-only scripts/audit-routes.ts",
    "test:integration": "vitest run tests/integration",
    "test:e2e": "playwright test",
    "test:coverage": "vitest run --coverage",
    "db:backup": "node scripts/backup-db.js",
    "deploy:validate": "./scripts/validate-deployment.sh",
    "deploy:monitor": "node scripts/monitor-deployment.js",
    "security:check": "npm audit --omit=dev --audit-level=high || true",
    "security:check:strict": "npm audit --omit=dev --audit-level=moderate",
    "docker:build": "./docker-build.sh",
    "docker:build:backend": "./docker-build.sh -t backend",
    "docker:build:frontend": "./docker-build.sh -t frontend",
    "docker:build:dev": "./docker-build.sh -t development",
    "docker:build:all": "./docker-build.sh -t backend && ./docker-build.sh -t frontend && ./docker-build.sh -t development",
    "docker:run": "./docker-run.sh"
  },
  "dependencies": {
    "@tensorflow/tfjs-node": "^4.15.0",
    "better-sqlite3": "^9.2.2",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "cross-env": "^7.0.3",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jszip": "^3.10.1",
    "multer": "^1.4.5-lts.1",
    "socket.io": "^4.7.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.20.1",
    "chart.js": "^4.4.0",
    "lucide-react": "^0.294.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@types/node": "^20.10.4",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.55.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "typescript": "^5.2.2",
    "vite": "^5.0.8",
    "vitest": "^1.0.4",
    "playwright": "^1.40.1"
  },
  "keywords": [
    "persian",
    "legal",
    "ai",
    "classification",
    "nlp",
    "bert",
    "dora",
    "machine-learning",
    "document-processing"
  ],
  "author": "Persian Legal AI Team",
  "license": "MIT"
}
