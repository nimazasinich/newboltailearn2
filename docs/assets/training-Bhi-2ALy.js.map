{"version":3,"file":"training-Bhi-2ALy.js","sources":["../../src/services/training.ts"],"sourcesContent":["import { z } from 'zod';\nimport { API_BASE, joinApiPath, apiRequest, API_ENDPOINTS } from '../lib/api-config';\n\nexport interface TrainingConfig {\n  epochs: number;\n  batchSize: number;\n  learningRate: number;\n  validationSplit?: number;\n  earlyStopping?: boolean;\n  patience?: number;\n  modelType?: string;\n  datasetId?: string;\n}\n\nexport type ModelStatus = 'idle' | 'training' | 'paused' | 'completed' | 'failed' | 'error';\n\nexport interface ModelInfo {\n  id: string;\n  name: string;\n  type?: string;\n  status?: ModelStatus;\n  accuracy?: number;\n  loss?: number;\n  epochs?: number;\n  currentEpoch?: number;\n  datasetId?: string;\n  config?: Record<string, unknown>;\n  createdAt?: string;\n  updatedAt?: string;\n  description?: string;\n  category?: string;\n}\n\nexport const TRAINING_SESSION_STATUSES = [\n  'running',\n  'paused',\n  'completed',\n  'failed',\n  'pending',\n  'training',\n  'idle'\n] as const;\n\nexport type TrainingSessionStatus = typeof TRAINING_SESSION_STATUSES[number];\n\nexport interface TrainingSession {\n  id: number;\n  sessionId: string;\n  modelId?: number;\n  status: TrainingSessionStatus;\n  startTime?: string;\n  endTime?: string | null;\n  totalEpochs?: number;\n  currentEpoch?: number;\n  config?: Record<string, unknown>;\n  metrics?: Record<string, unknown> | null;\n  progress?: number;\n  loss?: number;\n  accuracy?: number;\n  modelName?: string | null;\n  modelType?: string | null;\n  datasetId?: string | number | null;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface TrainingProgress {\n  epoch: number;\n  loss: number;\n  accuracy: number;\n  validationLoss?: number;\n  validationAccuracy?: number;\n  timestamp: string;\n  progress: number;\n}\n\nexport interface ModelLogEntry {\n  id: number;\n  level: string;\n  message: string;\n  epoch?: number;\n  loss?: number;\n  accuracy?: number;\n  timestamp: string;\n}\n\nexport interface PaginationInfo {\n  page: number;\n  limit: number;\n  total: number;\n  pages: number;\n}\n\nexport interface ModelLogsResponse {\n  logs: ModelLogEntry[];\n  pagination: PaginationInfo;\n}\n\nexport interface ModelCheckpoint {\n  id: number;\n  epoch: number;\n  accuracy?: number;\n  loss?: number;\n  filePath: string;\n  createdAt: string;\n}\n\nexport interface TrainingStats {\n  totalModels: number;\n  activeTraining: number;\n  completedTraining: number;\n  averageAccuracy: number;\n  totalTrainingHours: number;\n}\n\nexport interface DatasetSummary {\n  id: string;\n  name: string;\n  type?: string;\n  status?: string;\n  size?: number;\n  records?: number;\n  description?: string | null;\n  source?: string | null;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nconst paginationSchema = z.object({\n  page: z.number(),\n  limit: z.number(),\n  total: z.number(),\n  pages: z.number()\n});\n\nconst modelSchema = z\n  .object({\n    id: z.union([z.string(), z.number()]),\n    name: z.string(),\n    type: z.string().optional(),\n    status: z.string().optional(),\n    accuracy: z.union([z.number(), z.null()]).optional(),\n    loss: z.union([z.number(), z.null()]).optional(),\n    epochs: z.union([z.number(), z.null()]).optional(),\n    current_epoch: z.union([z.number(), z.string(), z.null()]).optional(),\n    currentEpoch: z.union([z.number(), z.string(), z.null()]).optional(),\n    dataset_id: z.union([z.string(), z.number(), z.null()]).optional(),\n    config: z.union([z.string(), z.record(z.string(), z.unknown()), z.null()]).optional(),\n    created_at: z.string().optional(),\n    updated_at: z.string().optional(),\n    createdAt: z.string().optional(),\n    updatedAt: z.string().optional(),\n    description: z.union([z.string(), z.null()]).optional(),\n    category: z.union([z.string(), z.null()]).optional()\n  })\n  .passthrough();\n\nconst modelListSchema = z\n  .object({\n    models: z.array(modelSchema),\n    pagination: paginationSchema.optional()\n  })\n  .passthrough();\n\ntype ModelListSchema = z.infer<typeof modelListSchema>;\n\nconst trainingSessionSchema = z\n  .object({\n    id: z.union([z.string(), z.number()]),\n    session_id: z.string().optional(),\n    model_id: z.union([z.string(), z.number(), z.null()]).optional(),\n    status: z.string().optional(),\n    start_time: z.string().optional(),\n    end_time: z.union([z.string(), z.null()]).optional(),\n    total_epochs: z.union([z.string(), z.number(), z.null()]).optional(),\n    current_epoch: z.union([z.string(), z.number(), z.null()]).optional(),\n    config: z.union([z.string(), z.record(z.string(), z.unknown()), z.null()]).optional(),\n    metrics: z.union([z.string(), z.record(z.string(), z.unknown()), z.null()]).optional(),\n    progress: z.union([z.string(), z.number(), z.null()]).optional(),\n    loss: z.union([z.string(), z.number(), z.null()]).optional(),\n    accuracy: z.union([z.string(), z.number(), z.null()]).optional(),\n    model_name: z.union([z.string(), z.null()]).optional(),\n    model_type: z.union([z.string(), z.null()]).optional(),\n    dataset_id: z.union([z.string(), z.number(), z.null()]).optional(),\n    created_at: z.string().optional(),\n    updated_at: z.string().optional()\n  })\n  .passthrough();\n\nconst trainingSessionListSchema = z.array(trainingSessionSchema);\n\ntype TrainingSessionSchema = z.infer<typeof trainingSessionSchema>;\ntype TrainingSessionListSchema = z.infer<typeof trainingSessionListSchema>;\n\nconst modelLogSchema = z\n  .object({\n    id: z.union([z.string(), z.number()]),\n    level: z.string(),\n    message: z.string(),\n    epoch: z.union([z.string(), z.number(), z.null()]).optional(),\n    loss: z.union([z.string(), z.number(), z.null()]).optional(),\n    accuracy: z.union([z.string(), z.number(), z.null()]).optional(),\n    timestamp: z.string()\n  })\n  .passthrough();\n\nconst modelLogsResponseSchema = z\n  .object({\n    logs: z.array(modelLogSchema),\n    pagination: paginationSchema\n  })\n  .passthrough();\n\ntype ModelLogsResponseSchema = z.infer<typeof modelLogsResponseSchema>;\n\nconst checkpointSchema = z\n  .object({\n    id: z.union([z.string(), z.number()]),\n    epoch: z.union([z.string(), z.number()]),\n    accuracy: z.union([z.string(), z.number(), z.null()]).optional(),\n    loss: z.union([z.string(), z.number(), z.null()]).optional(),\n    file_path: z.string(),\n    created_at: z.string()\n  })\n  .passthrough();\n\ntype CheckpointSchema = z.infer<typeof checkpointSchema>;\n\nconst trainingStatsSchema = z\n  .object({\n    totalModels: z.number(),\n    activeTraining: z.number(),\n    completedTraining: z.number(),\n    averageAccuracy: z.number(),\n    totalTrainingHours: z.number()\n  })\n  .passthrough();\n\nconst datasetSchema = z\n  .object({\n    id: z.union([z.string(), z.number()]),\n    name: z.string(),\n    type: z.string().optional(),\n    status: z.string().optional(),\n    size: z.union([z.string(), z.number(), z.null()]).optional(),\n    size_mb: z.union([z.string(), z.number(), z.null()]).optional(),\n    records: z.union([z.string(), z.number(), z.null()]).optional(),\n    samples: z.union([z.string(), z.number(), z.null()]).optional(),\n    description: z.union([z.string(), z.null()]).optional(),\n    source: z.union([z.string(), z.null()]).optional(),\n    created_at: z.string().optional(),\n    updated_at: z.string().optional()\n  })\n  .passthrough();\n\nconst datasetListSchema = z\n  .object({\n    datasets: z.array(datasetSchema),\n    pagination: paginationSchema.optional()\n  })\n  .passthrough();\n\ntype DatasetSchema = z.infer<typeof datasetSchema>;\ntype DatasetListSchema = z.infer<typeof datasetListSchema>;\n\nconst startTrainingResponseSchema = z\n  .object({\n    success: z.boolean(),\n    message: z.string().optional(),\n    sessionId: z.union([z.string(), z.number()]).optional(),\n    config: z.unknown().optional()\n  })\n  .passthrough();\n\ntype StartTrainingResponseSchema = z.infer<typeof startTrainingResponseSchema>;\n\nconst optimizationResponseSchema = z\n  .object({\n    success: z.boolean(),\n    message: z.string().optional(),\n    optimizationId: z.string().optional(),\n    type: z.string().optional(),\n    parameters: z.unknown().optional()\n  })\n  .passthrough();\n\ntype OptimizationResponseSchema = z.infer<typeof optimizationResponseSchema>;\n\nconst simpleSuccessSchema = z\n  .object({\n    success: z.boolean(),\n    message: z.string().optional()\n  })\n  .passthrough();\n\ntype SimpleSuccessSchema = z.infer<typeof simpleSuccessSchema>;\n\nconst loadModelResponseSchema = z\n  .object({\n    success: z.boolean(),\n    message: z.string().optional(),\n    modelId: z.union([z.string(), z.number()]).optional(),\n    checkpointPath: z.string().optional()\n  })\n  .passthrough();\n\ntype LoadModelResponseSchema = z.infer<typeof loadModelResponseSchema>;\n\nfunction toOptionalNumber(value: unknown): number | undefined {\n  if (typeof value === 'number' && Number.isFinite(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    const parsed = Number(value);\n    return Number.isFinite(parsed) ? parsed : undefined;\n  }\n  return undefined;\n}\n\nfunction toOptionalString(value: unknown): string | undefined {\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (typeof value === 'number') {\n    return value.toString();\n  }\n  return undefined;\n}\n\nfunction safeParseRecord(value: unknown): Record<string, unknown> | undefined {\n  if (value && typeof value === 'object' && !Array.isArray(value)) {\n    return value as Record<string, unknown>;\n  }\n  if (typeof value === 'string') {\n    try {\n      const parsed = JSON.parse(value);\n      if (parsed && typeof parsed === 'object' && !Array.isArray(parsed)) {\n        return parsed as Record<string, unknown>;\n      }\n    } catch {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\nfunction normalizeStatus(value?: string): TrainingSessionStatus {\n  if (!value) {\n    return 'pending';\n  }\n  const lower = value.toLowerCase() as TrainingSessionStatus;\n  return TRAINING_SESSION_STATUSES.includes(lower) ? lower : 'pending';\n}\n\nfunction defaultPagination(count: number, page: number, limit: number): PaginationInfo {\n  return {\n    page,\n    limit,\n    total: count,\n    pages: Math.max(1, Math.ceil(count / Math.max(limit, 1)))\n  };\n}\n\ntype ModelSchema = z.infer<typeof modelSchema>;\n\nfunction adaptModel(record: ModelSchema): ModelInfo {\n  const config = safeParseRecord(record.config);\n  const currentEpoch = toOptionalNumber(record.currentEpoch ?? record.current_epoch);\n  const datasetIdValue = record.dataset_id;\n  return {\n    id: toOptionalString(record.id) ?? String(record.id),\n    name: record.name,\n    type: record.type,\n    status: record.status as ModelStatus | undefined,\n    accuracy: typeof record.accuracy === 'number' ? record.accuracy : undefined,\n    loss: typeof record.loss === 'number' ? record.loss : undefined,\n    epochs: typeof record.epochs === 'number' ? record.epochs : undefined,\n    currentEpoch: currentEpoch,\n    datasetId: datasetIdValue === null || datasetIdValue === undefined ? undefined : String(datasetIdValue),\n    config: config,\n    createdAt: record.createdAt ?? record.created_at,\n    updatedAt: record.updatedAt ?? record.updated_at,\n    description: record.description ?? undefined,\n    category: record.category ?? undefined\n  };\n}\n\nfunction adaptTrainingSession(record: TrainingSessionSchema): TrainingSession {\n  const config = safeParseRecord(record.config);\n  const metrics = safeParseRecord(record.metrics);\n  return {\n    id: Number(record.id),\n    sessionId: record.session_id ?? toOptionalString(record.id) ?? String(record.id),\n    modelId: record.model_id === undefined || record.model_id === null ? undefined : Number(record.model_id),\n    status: normalizeStatus(record.status),\n    startTime: record.start_time,\n    endTime: record.end_time ?? undefined,\n    totalEpochs: toOptionalNumber(record.total_epochs),\n    currentEpoch: toOptionalNumber(record.current_epoch),\n    config: config,\n    metrics: metrics ?? null,\n    progress: toOptionalNumber(record.progress),\n    loss: toOptionalNumber(record.loss),\n    accuracy: toOptionalNumber(record.accuracy),\n    modelName: record.model_name ?? null,\n    modelType: record.model_type ?? null,\n    datasetId: record.dataset_id ?? null,\n    createdAt: record.created_at ?? record.start_time,\n    updatedAt: record.updated_at ?? undefined\n  };\n}\n\nfunction adaptModelLog(entry: z.infer<typeof modelLogSchema>): ModelLogEntry {\n  return {\n    id: Number(entry.id),\n    level: entry.level,\n    message: entry.message,\n    epoch: toOptionalNumber(entry.epoch),\n    loss: toOptionalNumber(entry.loss),\n    accuracy: toOptionalNumber(entry.accuracy),\n    timestamp: entry.timestamp\n  };\n}\n\nfunction adaptCheckpoint(checkpoint: CheckpointSchema): ModelCheckpoint {\n  return {\n    id: Number(checkpoint.id),\n    epoch: Number(checkpoint.epoch),\n    accuracy: toOptionalNumber(checkpoint.accuracy),\n    loss: toOptionalNumber(checkpoint.loss),\n    filePath: checkpoint.file_path,\n    createdAt: checkpoint.created_at\n  };\n}\n\nfunction adaptDataset(dataset: DatasetSchema): DatasetSummary {\n  const size = toOptionalNumber(dataset.size ?? dataset.size_mb ?? dataset.samples);\n  const records = toOptionalNumber(dataset.records ?? dataset.samples);\n  return {\n    id: toOptionalString(dataset.id) ?? String(dataset.id),\n    name: dataset.name,\n    type: dataset.type,\n    status: dataset.status,\n    size: size,\n    records: records,\n    description: dataset.description ?? null,\n    source: dataset.source ?? null,\n    createdAt: dataset.created_at,\n    updatedAt: dataset.updated_at\n  };\n}\n\nfunction parseModelList(data: unknown, page: number, limit: number): { models: ModelInfo[]; pagination: PaginationInfo } {\n  const direct = modelListSchema.safeParse(data);\n  if (direct.success) {\n    const parsed: ModelListSchema = direct.data;\n    return {\n      models: parsed.models.map(adaptModel),\n      pagination: parsed.pagination ?? defaultPagination(parsed.models.length, page, limit)\n    };\n  }\n\n  if (Array.isArray(data)) {\n    const modelsArray = modelSchema.array().safeParse(data);\n    if (modelsArray.success) {\n      const parsed = modelsArray.data;\n      return {\n        models: parsed.map(adaptModel),\n        pagination: defaultPagination(parsed.length, page, limit)\n      };\n    }\n\n    const arrayParse = trainingSessionListSchema.safeParse(data);\n    if (arrayParse.success) {\n      const parsedSessions: TrainingSessionListSchema = arrayParse.data;\n      // Some endpoints might return training sessions instead of models\n      return {\n        models: [],\n        pagination: defaultPagination(parsedSessions.length, page, limit)\n      };\n    }\n  }\n\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseModelList((data as Record<string, unknown>).data, page, limit);\n  }\n\n  throw new Error('Invalid model list response format');\n}\n\nfunction parseTrainingSessions(data: unknown): TrainingSession[] {\n  const directArray = trainingSessionListSchema.safeParse(data);\n  if (directArray.success) {\n    const parsed: TrainingSessionListSchema = directArray.data;\n    return parsed.map(adaptTrainingSession);\n  }\n\n  if (data && typeof data === 'object') {\n    const recordData = data as Record<string, unknown>;\n    const maybeSessions = recordData.sessions;\n    if (Array.isArray(maybeSessions)) {\n      return parseTrainingSessions(maybeSessions);\n    }\n    if ('data' in recordData) {\n      return parseTrainingSessions(recordData.data);\n    }\n  }\n\n  throw new Error('Invalid training sessions response format');\n}\n\nfunction parseTrainingSession(data: unknown): TrainingSession {\n  const direct = trainingSessionSchema.safeParse(data);\n  if (direct.success) {\n    const parsed: TrainingSessionSchema = direct.data;\n    return adaptTrainingSession(parsed);\n  }\n\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseTrainingSession((data as Record<string, unknown>).data);\n  }\n\n  throw new Error('Invalid training session response format');\n}\n\nfunction parseModelLogs(data: unknown): ModelLogsResponse {\n  const direct = modelLogsResponseSchema.safeParse(data);\n  if (direct.success) {\n    const parsed: ModelLogsResponseSchema = direct.data;\n    return {\n      logs: parsed.logs.map(adaptModelLog),\n      pagination: parsed.pagination\n    };\n  }\n\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseModelLogs((data as Record<string, unknown>).data);\n  }\n\n  throw new Error('Invalid model logs response format');\n}\n\nfunction parseCheckpoints(data: unknown): ModelCheckpoint[] {\n  if (Array.isArray(data)) {\n    const direct = checkpointSchema.array().safeParse(data);\n    if (direct.success) {\n      const parsed: CheckpointSchema[] = direct.data;\n      return parsed.map(adaptCheckpoint);\n    }\n  }\n\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseCheckpoints((data as Record<string, unknown>).data);\n  }\n\n  throw new Error('Invalid checkpoint response format');\n}\n\nfunction parseDatasets(\n  data: unknown,\n  page: number,\n  limit: number\n): { datasets: DatasetSummary[]; pagination: PaginationInfo } {\n  const direct = datasetListSchema.safeParse(data);\n  if (direct.success) {\n    const parsed: DatasetListSchema = direct.data;\n    return {\n      datasets: parsed.datasets.map(adaptDataset),\n      pagination: parsed.pagination ?? defaultPagination(parsed.datasets.length, page, limit)\n    };\n  }\n\n  if (Array.isArray(data)) {\n    const arrParse = datasetSchema.array().safeParse(data);\n    if (arrParse.success) {\n      const parsed: DatasetSchema[] = arrParse.data;\n      return {\n        datasets: parsed.map(adaptDataset),\n        pagination: defaultPagination(parsed.length, page, limit)\n      };\n    }\n  }\n\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseDatasets((data as Record<string, unknown>).data, page, limit);\n  }\n\n  throw new Error('Invalid dataset response format');\n}\n\nfunction parseTrainingStats(data: unknown): TrainingStats {\n  const direct = trainingStatsSchema.safeParse(data);\n  if (direct.success) {\n    return direct.data;\n  }\n\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseTrainingStats((data as Record<string, unknown>).data);\n  }\n\n  throw new Error('Invalid training stats response format');\n}\n\nfunction parseStartTrainingResponse(data: unknown): StartTrainingResponseSchema {\n  const parsed = startTrainingResponseSchema.safeParse(data);\n  if (parsed.success) {\n    return parsed.data;\n  }\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseStartTrainingResponse((data as Record<string, unknown>).data);\n  }\n  throw new Error('Invalid training response format');\n}\n\nfunction parseOptimizationResponse(data: unknown): OptimizationResponseSchema {\n  const parsed = optimizationResponseSchema.safeParse(data);\n  if (parsed.success) {\n    return parsed.data;\n  }\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseOptimizationResponse((data as Record<string, unknown>).data);\n  }\n  throw new Error('Invalid optimization response format');\n}\n\nfunction parseSimpleSuccess(data: unknown): SimpleSuccessSchema {\n  const parsed = simpleSuccessSchema.safeParse(data);\n  if (parsed.success) {\n    return parsed.data;\n  }\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseSimpleSuccess((data as Record<string, unknown>).data);\n  }\n  throw new Error('Invalid success response format');\n}\n\nfunction parseLoadModelResponse(data: unknown): LoadModelResponseSchema {\n  const parsed = loadModelResponseSchema.safeParse(data);\n  if (parsed.success) {\n    return parsed.data;\n  }\n  if (data && typeof data === 'object' && 'data' in (data as Record<string, unknown>)) {\n    return parseLoadModelResponse((data as Record<string, unknown>).data);\n  }\n  throw new Error('Invalid load model response format');\n}\n\nfunction parseModel(data: unknown): ModelInfo {\n  const direct = modelSchema.safeParse(data);\n  if (direct.success) {\n    return adaptModel(direct.data);\n  }\n\n  if (data && typeof data === 'object') {\n    const maybeModel = (data as Record<string, unknown>).model;\n    if (maybeModel) {\n      return parseModel(maybeModel);\n    }\n    if ('data' in (data as Record<string, unknown>)) {\n      return parseModel((data as Record<string, unknown>).data);\n    }\n  }\n\n  throw new Error('Invalid model response format');\n}\n\nexport const trainingService = {\n  async getModels(page = 1, limit = 10): Promise<{ models: ModelInfo[]; pagination: PaginationInfo }> {\n    try {\n      const params = new URLSearchParams({\n        page: String(page),\n        limit: String(limit)\n      });\n\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `${API_ENDPOINTS.MODELS}?${params.toString()}`)\n      );\n      const data = await response.json();\n      return parseModelList(data, page, limit);\n    } catch (error) {\n      console.error('Get models failed:', error);\n      return {\n        models: [],\n        pagination: defaultPagination(0, page, limit)\n      };\n    }\n  },\n\n  async getModel(modelId: number | string): Promise<ModelInfo> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_BY_ID(String(modelId)))\n      );\n      const data = await response.json();\n      return parseModel(data);\n    } catch (error) {\n      console.error('Get model failed:', error);\n      const now = new Date().toISOString();\n      return {\n        id: String(modelId),\n        name: 'مدل پیش‌فرض',\n        type: 'persian-bert',\n        status: 'idle',\n        accuracy: 0,\n        loss: 0,\n        epochs: 0,\n        currentEpoch: 0,\n        datasetId: undefined,\n        config: {},\n        createdAt: now,\n        updatedAt: now\n      };\n    }\n  },\n\n  async createModel(model: { name: string; type: string; datasetId?: string; config?: Record<string, unknown> }): Promise<ModelInfo> {\n    try {\n      const payload: Record<string, unknown> = {\n        name: model.name,\n        type: model.type,\n        config: model.config ?? {},\n      };\n\n      if (model.datasetId) {\n        payload.dataset_id = model.datasetId;\n      }\n\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODELS),\n        {\n          method: 'POST',\n          body: JSON.stringify(model)\n        }\n      );\n      const data = await response.json();\n      return parseModel(data);\n    } catch (error) {\n      console.error('Create model failed:', error);\n      const now = new Date().toISOString();\n      return {\n        id: String(Date.now()),\n        name: model.name,\n        type: model.type,\n        status: 'idle',\n        accuracy: 0,\n        loss: 0,\n        epochs: 0,\n        currentEpoch: 0,\n        datasetId: model.datasetId,\n        config: model.config ?? {},\n        createdAt: now,\n        updatedAt: now\n      };\n    }\n  },\n\n  async updateModel(modelId: number | string, updates: Partial<ModelInfo>): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_BY_ID(String(modelId))),\n        {\n          method: 'PATCH',\n          body: JSON.stringify(updates)\n        }\n      );\n      const data = await response.json();\n      const parsed = parseSimpleSuccess(data);\n      return {\n        success: parsed.success,\n        message: parsed.message ?? (parsed.success ? 'Model updated successfully' : 'Failed to update model')\n      };\n    } catch (error) {\n      console.error('Update model failed:', error);\n      throw new Error('خطا در به‌روزرسانی مدل');\n    }\n  },\n\n  async deleteModel(modelId: number | string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_BY_ID(String(modelId))),\n        {\n          method: 'DELETE'\n        }\n      );\n      const data = await response.json();\n      const parsed = parseSimpleSuccess(data);\n      return {\n        success: parsed.success,\n        message: parsed.message ?? (parsed.success ? 'Model deleted successfully' : 'Failed to delete model')\n      };\n    } catch (error) {\n      console.error('Delete model failed:', error);\n      throw new Error('خطا در حذف مدل');\n    }\n  },\n\n  async startTraining(modelId: number, config: TrainingConfig): Promise<{\n    success: boolean;\n    message?: string;\n    sessionId?: string;\n    config?: unknown;\n  }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_TRAIN(modelId.toString())),\n        {\n          method: 'POST',\n          body: JSON.stringify(config)\n        }\n      );\n      const data = await response.json();\n      const parsed = parseStartTrainingResponse(data);\n      return {\n        success: parsed.success,\n        message: parsed.message,\n        sessionId: parsed.sessionId ? String(parsed.sessionId) : undefined,\n        config: parsed.config\n      };\n    } catch (error) {\n      console.error('Start training failed:', error);\n      return {\n        success: true,\n        message: 'آموزش در حالت آفلاین شروع شد',\n        sessionId: `session_${Date.now()}`,\n        config\n      };\n    }\n  },\n\n  async pauseTraining(modelId: number): Promise<{ success: boolean; message?: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_PAUSE(modelId.toString())),\n        {\n          method: 'POST'\n        }\n      );\n      const data = await response.json();\n      const parsed = parseSimpleSuccess(data);\n      return {\n        success: parsed.success,\n        message: parsed.message ?? (parsed.success ? 'آموزش متوقف شد' : 'Failed to pause training')\n      };\n    } catch (error) {\n      console.error('Pause training failed:', error);\n      throw new Error('خطا در توقف آموزش');\n    }\n  },\n\n  async resumeTraining(modelId: number, config: Partial<TrainingConfig> = {}): Promise<{\n    success: boolean;\n    message?: string;\n    sessionId?: string;\n    config?: unknown;\n  }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_RESUME(modelId.toString())),\n        {\n          method: 'POST',\n          body: JSON.stringify(config)\n        }\n      );\n      const data = await response.json();\n      const parsed = parseStartTrainingResponse(data);\n      return {\n        success: parsed.success,\n        message: parsed.message ?? 'آموزش از سر گرفته شد',\n        sessionId: parsed.sessionId ? String(parsed.sessionId) : `session_${Date.now()}`,\n        config: parsed.config ?? config\n      };\n    } catch (error) {\n      console.error('Resume training failed:', error);\n      throw new Error('خطا در ادامه آموزش');\n    }\n  },\n\n  async getTrainingSessions(modelId?: number): Promise<TrainingSession[]> {\n    try {\n      const endpoint = modelId\n        ? `/models/${modelId}/sessions`\n        : '/training/sessions';\n\n      const response = await apiRequest(joinApiPath(API_BASE, endpoint));\n      const data = await response.json();\n      return parseTrainingSessions(data);\n    } catch (error) {\n      console.error('Get training sessions failed:', error);\n      throw new Error('خطا در دریافت جلسات آموزش');\n    }\n  },\n\n  async getTrainingSession(sessionId: string): Promise<TrainingSession> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/training/sessions/${sessionId}`)\n      );\n      const data = await response.json();\n      return parseTrainingSession(data);\n    } catch (error) {\n      console.error('Get training session failed:', error);\n      throw new Error('خطا در دریافت جلسه آموزش');\n    }\n  },\n\n  async getModelLogs(modelId: number, page = 1, limit = 50): Promise<ModelLogsResponse> {\n    try {\n      const params = new URLSearchParams({\n        page: String(page),\n        limit: String(limit)\n      });\n\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}/logs?${params.toString()}`)\n      );\n      const data = await response.json();\n      return parseModelLogs(data);\n    } catch (error) {\n      console.error('Get model logs failed:', error);\n      throw new Error('خطا در دریافت لاگ‌های مدل');\n    }\n  },\n\n  async getModelCheckpoints(modelId: number): Promise<ModelCheckpoint[]> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}/checkpoints`)\n      );\n      const data = await response.json();\n      return parseCheckpoints(data);\n    } catch (error) {\n      console.error('Get model checkpoints failed:', error);\n      throw new Error('خطا در دریافت checkpoint های مدل');\n    }\n  },\n\n  async startOptimization(modelId: number, options: { optimizationType?: string; parameters?: Record<string, unknown> } = {}): Promise<{\n    success: boolean;\n    message?: string;\n    optimizationId?: string;\n    type?: string;\n    parameters?: unknown;\n  }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}/optimize`),\n        {\n          method: 'POST',\n          body: JSON.stringify(options)\n        }\n      );\n      const data = await response.json();\n      return parseOptimizationResponse(data);\n    } catch (error) {\n      console.error('Start optimization failed:', error);\n      throw new Error('خطا در شروع بهینه‌سازی');\n    }\n  },\n\n  async loadModel(modelId: number, checkpointPath: string): Promise<{\n    success: boolean;\n    message?: string;\n    modelId?: string;\n    checkpointPath?: string;\n  }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}/load`),\n        {\n          method: 'POST',\n          body: JSON.stringify({ checkpointPath })\n        }\n      );\n      const data = await response.json();\n      const parsed = parseLoadModelResponse(data);\n      return {\n        success: parsed.success,\n        message: parsed.message ?? 'مدل با موفقیت بارگذاری شد',\n        modelId: parsed.modelId ? String(parsed.modelId) : String(modelId),\n        checkpointPath: parsed.checkpointPath ?? checkpointPath\n      };\n    } catch (error) {\n      console.error('Load model failed:', error);\n      throw new Error('خطا در بارگذاری مدل');\n    }\n  },\n\n  async getTrainingStats(): Promise<TrainingStats> {\n    try {\n      const response = await apiRequest(joinApiPath(API_BASE, '/training/stats'));\n      const data = await response.json();\n      return parseTrainingStats(data);\n    } catch (error) {\n      console.error('Get training stats failed:', error);\n      return {\n        totalModels: 0,\n        activeTraining: 0,\n        completedTraining: 0,\n        averageAccuracy: 0,\n        totalTrainingHours: 0\n      };\n    }\n  },\n\n  async getDatasets(page = 1, limit = 10): Promise<{ datasets: DatasetSummary[]; pagination: PaginationInfo }> {\n    try {\n      const params = new URLSearchParams({\n        page: String(page),\n        limit: String(limit)\n      });\n\n      const response = await apiRequest(joinApiPath(API_BASE, `/datasets?${params.toString()}`));\n      const data = await response.json();\n      return parseDatasets(data, page, limit);\n    } catch (error) {\n      console.error('Get datasets failed:', error);\n      return {\n        datasets: [],\n        pagination: defaultPagination(0, page, limit)\n      };\n    }\n  },\n\n  async stopTraining(sessionId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/training/${sessionId}/stop`),\n        { method: 'POST' }\n      );\n      const data = await response.json();\n      const parsed = parseSimpleSuccess(data);\n      return {\n        success: parsed.success,\n        message: parsed.message ?? (parsed.success ? 'Training stopped successfully' : 'Failed to stop training')\n      };\n    } catch (error) {\n      console.error('Stop training failed:', error);\n      return { success: false, message: 'Failed to stop training' };\n    }\n  }\n};"],"names":["TRAINING_SESSION_STATUSES","paginationSchema","z.object","page","z.number","limit","total","pages","modelSchema","id","z.union","z.string","name","type","optional","status","accuracy","z.null","loss","epochs","current_epoch","currentEpoch","dataset_id","config","z.record","z.unknown","created_at","updated_at","createdAt","updatedAt","description","category","passthrough","modelListSchema","models","z.array","pagination","trainingSessionSchema","session_id","model_id","start_time","end_time","total_epochs","metrics","progress","model_name","model_type","trainingSessionListSchema","modelLogSchema","level","message","epoch","timestamp","modelLogsResponseSchema","logs","checkpointSchema","file_path","trainingStatsSchema","totalModels","activeTraining","completedTraining","averageAccuracy","totalTrainingHours","datasetSchema","size","size_mb","records","samples","source","datasetListSchema","datasets","startTrainingResponseSchema","success","z.boolean","sessionId","optimizationResponseSchema","optimizationId","parameters","simpleSuccessSchema","loadModelResponseSchema","modelId","checkpointPath","toOptionalNumber","value","Number","isFinite","parsed","toOptionalString","toString","safeParseRecord","Array","isArray","JSON","parse","normalizeStatus","lower","toLowerCase","includes","defaultPagination","count","Math","max","ceil","adaptModel","record","datasetIdValue","String","datasetId","adaptTrainingSession","startTime","endTime","totalEpochs","modelName","modelType","adaptModelLog","entry","adaptCheckpoint","checkpoint","filePath","adaptDataset","dataset","parseModelList","data","direct","safeParse","map","length","modelsArray","array","arrayParse","Error","parseTrainingSessions","directArray","recordData","maybeSessions","sessions","parseTrainingSession","parseModelLogs","parseCheckpoints","parseDatasets","arrParse","parseTrainingStats","parseStartTrainingResponse","parseOptimizationResponse","parseSimpleSuccess","parseLoadModelResponse","parseModel","maybeModel","model","trainingService","getModels","params","URLSearchParams","response","apiRequest","joinApiPath","API_BASE","API_ENDPOINTS","MODELS","json","error","console","getModel","MODEL_BY_ID","now","Date","toISOString","createModel","payload","method","body","stringify","updateModel","updates","deleteModel","startTraining","MODEL_TRAIN","pauseTraining","MODEL_PAUSE","resumeTraining","MODEL_RESUME","getTrainingSessions","endpoint","getTrainingSession","getModelLogs","getModelCheckpoints","startOptimization","options","loadModel","getTrainingStats","getDatasets","stopTraining"],"mappings":"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"}