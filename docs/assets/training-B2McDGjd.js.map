{"version":3,"file":"training-B2McDGjd.js","sources":["../../src/services/training.ts"],"sourcesContent":["import { API_BASE, joinApiPath, apiRequest, API_ENDPOINTS } from '../lib/api-config';\n\nexport interface TrainingConfig {\n  epochs: number;\n  batchSize: number;\n  learningRate: number;\n  validationSplit?: number;\n  earlyStopping?: boolean;\n  patience?: number;\n  modelType?: string;\n  datasetId?: string;\n}\n\nexport interface TrainingSession {\n  id: number;\n  modelId: number;\n  sessionId: string;\n  status: 'running' | 'paused' | 'completed' | 'failed' | 'pending';\n  progress: number;\n  currentEpoch: number;\n  totalEpochs: number;\n  currentStep: number;\n  totalSteps: number;\n  loss: number;\n  accuracy: number;\n  validationLoss?: number;\n  validationAccuracy?: number;\n  learningRate: number;\n  batchSize: number;\n  startTime: string;\n  endTime?: string;\n  estimatedCompletion?: string;\n  errorMessage?: string;\n  config: TrainingConfig;\n  metrics?: any;\n}\n\nexport interface TrainingProgress {\n  epoch: number;\n  loss: number;\n  accuracy: number;\n  validationLoss?: number;\n  validationAccuracy?: number;\n  timestamp: string;\n  progress: number;\n}\n\nexport interface ModelInfo {\n  id: number;\n  name: string;\n  type: string;\n  status: 'idle' | 'training' | 'paused' | 'completed' | 'error';\n  accuracy?: number;\n  loss?: number;\n  epochs?: number;\n  current_epoch?: number;\n  dataset_id?: string;\n  config?: any;\n  created_at: string;\n  updated_at: string;\n  description?: string;\n  category?: string;\n}\n\nexport const trainingService = {\n  /**\n   * Get all models\n   */\n  async getModels(page = 1, limit = 10): Promise<{ models: ModelInfo[]; pagination: any }> {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `${API_ENDPOINTS.MODELS}?${params.toString()}`)\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Get models failed:', error);\n      // Return fallback data for offline mode\n      return {\n        models: [],\n        pagination: { page, limit, total: 0, pages: 0 }\n      };\n    }\n  },\n\n  /**\n   * Get specific model\n   */\n  async getModel(modelId: number): Promise<ModelInfo> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_BY_ID(modelId.toString()))\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Get model failed:', error);\n      // Return fallback model data\n      return {\n        id: modelId,\n        name: 'مدل پیش‌فرض',\n        type: 'persian-bert',\n        status: 'idle',\n        accuracy: 0,\n        loss: 0,\n        epochs: 0,\n        current_epoch: 0,\n        dataset_id: '',\n        config: {},\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n    }\n  },\n\n  /**\n   * Create new model\n   */\n  async createModel(model: { name: string; type: string; datasetId?: string; config?: any }): Promise<ModelInfo> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODELS),\n        {\n          method: 'POST',\n          body: JSON.stringify(model),\n        }\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Create model failed:', error);\n      // Return a mock created model for offline mode\n      return {\n        id: Date.now(),\n        name: model.name,\n        type: model.type,\n        status: 'idle',\n        accuracy: 0,\n        loss: 0,\n        epochs: 0,\n        current_epoch: 0,\n        datasetId: model.datasetId || '',\n        config: model.config || {},\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n    }\n  },\n\n  /**\n   * Update model\n   */\n  async updateModel(modelId: number, updates: Partial<ModelInfo>): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}`),\n        {\n          method: 'PUT',\n          body: JSON.stringify(updates),\n        }\n      );\n      return {\n        success: response.ok,\n        message: response.ok ? 'Model updated successfully' : 'Failed to update model'\n      };\n    } catch (error) {\n      console.error('Update model failed:', error);\n      throw new Error('خطا در به‌روزرسانی مدل');\n    }\n  },\n\n  /**\n   * Delete model\n   */\n  async deleteModel(modelId: number): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}`),\n        {\n          method: 'DELETE',\n        }\n      );\n      return {\n        success: response.ok,\n        message: response.ok ? 'Model deleted successfully' : 'Failed to delete model'\n      };\n    } catch (error) {\n      console.error('Delete model failed:', error);\n      throw new Error('خطا در حذف مدل');\n    }\n  },\n\n  /**\n   * Start training\n   */\n  async startTraining(modelId: number, config: TrainingConfig): Promise<{\n    success: boolean;\n    message: string;\n    sessionId: string;\n    config: TrainingConfig;\n  }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, API_ENDPOINTS.MODEL_TRAIN(modelId.toString())),\n        {\n          method: 'POST',\n          body: JSON.stringify(config),\n        }\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Start training failed:', error);\n      // Return mock training session for offline mode\n      return {\n        success: true,\n        message: 'آموزش در حالت آفلاین شروع شد',\n        sessionId: `session_${Date.now()}`,\n        config\n      };\n    }\n  },\n\n  /**\n   * Pause training\n   */\n  async pauseTraining(modelId: number): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/models/${modelId}/pause`),\n        {\n          method: 'POST',\n        }\n      );\n      return response;\n    } catch (error) {\n      console.error('Pause training failed:', error);\n      throw new Error('خطا در توقف آموزش');\n    }\n  },\n\n  /**\n   * Resume training\n   */\n  async resumeTraining(modelId: number, config?: Partial<TrainingConfig>): Promise<{\n    success: boolean;\n    message: string;\n    sessionId: string;\n    config: TrainingConfig;\n  }> {\n    try {\n      const response = await apiRequest<{\n        success: boolean;\n        message: string;\n        sessionId: string;\n        config: TrainingConfig;\n      }>(\n        joinApiPath(API_BASE, `/models/${modelId}/resume`),\n        {\n          method: 'POST',\n          body: JSON.stringify(config || {}),\n        }\n      );\n      return response;\n    } catch (error) {\n      console.error('Resume training failed:', error);\n      throw new Error('خطا در ادامه آموزش');\n    }\n  },\n\n  /**\n   * Get training sessions\n   */\n  async getTrainingSessions(modelId?: number): Promise<TrainingSession[]> {\n    try {\n      const endpoint = modelId \n        ? `/models/${modelId}/sessions`\n        : '/training/sessions';\n\n      const response = await apiRequest(\n        joinApiPath(API_BASE, endpoint)\n      );\n      return response;\n    } catch (error) {\n      console.error('Get training sessions failed:', error);\n      throw new Error('خطا در دریافت جلسات آموزش');\n    }\n  },\n\n  /**\n   * Get training session by ID\n   */\n  async getTrainingSession(sessionId: string): Promise<TrainingSession> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/training/sessions/${sessionId}`)\n      );\n      return response;\n    } catch (error) {\n      console.error('Get training session failed:', error);\n      throw new Error('خطا در دریافت جلسه آموزش');\n    }\n  },\n\n  /**\n   * Get model logs\n   */\n  async getModelLogs(modelId: number, page = 1, limit = 50): Promise<{\n    logs: Array<{\n      id: number;\n      level: string;\n      message: string;\n      epoch?: number;\n      loss?: number;\n      accuracy?: number;\n      timestamp: string;\n    }>;\n    pagination: any;\n  }> {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n\n      const response = await apiRequest<{\n        logs: Array<{\n          id: number;\n          level: string;\n          message: string;\n          epoch?: number;\n          loss?: number;\n          accuracy?: number;\n          timestamp: string;\n        }>;\n        pagination: any;\n      }>(\n        joinApiPath(API_BASE, `/models/${modelId}/logs?${params.toString()}`)\n      );\n      return response;\n    } catch (error) {\n      console.error('Get model logs failed:', error);\n      throw new Error('خطا در دریافت لاگ‌های مدل');\n    }\n  },\n\n  /**\n   * Get model checkpoints\n   */\n  async getModelCheckpoints(modelId: number): Promise<Array<{\n    id: number;\n    epoch: number;\n    accuracy: number;\n    loss: number;\n    filePath: string;\n    createdAt: string;\n  }>> {\n    try {\n      const response = await apiRequest<Array<{\n        id: number;\n        epoch: number;\n        accuracy: number;\n        loss: number;\n        filePath: string;\n        createdAt: string;\n      }>>(\n        joinApiPath(API_BASE, `/models/${modelId}/checkpoints`)\n      );\n      return response;\n    } catch (error) {\n      console.error('Get model checkpoints failed:', error);\n      throw new Error('خطا در دریافت checkpoint های مدل');\n    }\n  },\n\n  /**\n   * Start hyperparameter optimization\n   */\n  async startOptimization(modelId: number, options: {\n    optimizationType?: string;\n    parameters?: any;\n  } = {}): Promise<{\n    success: boolean;\n    message: string;\n    optimizationId: string;\n    type: string;\n    parameters: any;\n  }> {\n    try {\n      const response = await apiRequest<{\n        success: boolean;\n        message: string;\n        optimizationId: string;\n        type: string;\n        parameters: any;\n      }>(\n        joinApiPath(API_BASE, `/models/${modelId}/optimize`),\n        {\n          method: 'POST',\n          body: JSON.stringify(options),\n        }\n      );\n      return response;\n    } catch (error) {\n      console.error('Start optimization failed:', error);\n      throw new Error('خطا در شروع بهینه‌سازی');\n    }\n  },\n\n  /**\n   * Load model from checkpoint\n   */\n  async loadModel(modelId: number, checkpointPath: string): Promise<{\n    success: boolean;\n    message: string;\n    modelId: number;\n    checkpointPath: string;\n  }> {\n    try {\n      const response = await apiRequest<{\n        success: boolean;\n        message: string;\n        modelId: number;\n        checkpointPath: string;\n      }>(\n        joinApiPath(API_BASE, `/models/${modelId}/load`),\n        {\n          method: 'POST',\n          body: JSON.stringify({ checkpointPath }),\n        }\n      );\n      return response;\n    } catch (error) {\n      console.error('Load model failed:', error);\n      throw new Error('خطا در بارگذاری مدل');\n    }\n  },\n\n  /**\n   * Get training statistics\n   */\n  async getTrainingStats(): Promise<{\n    totalModels: number;\n    activeTraining: number;\n    completedTraining: number;\n    averageAccuracy: number;\n    totalTrainingHours: number;\n  }> {\n    try {\n      const response = await apiRequest<{\n        totalModels: number;\n        activeTraining: number;\n        completedTraining: number;\n        averageAccuracy: number;\n        totalTrainingHours: number;\n      }>(\n        joinApiPath(API_BASE, '/training/stats')\n      );\n      return response;\n    } catch (error) {\n      console.error('Get training stats failed:', error);\n      // Return fallback data\n      return {\n        totalModels: 0,\n        activeTraining: 0,\n        completedTraining: 0,\n        averageAccuracy: 0,\n        totalTrainingHours: 0\n      };\n    }\n  },\n\n  /**\n   * Get datasets\n   */\n  async getDatasets(): Promise<{ datasets: any[] }> {\n    try {\n      const response = await apiRequest(joinApiPath(API_BASE, '/datasets'));\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Get datasets failed:', error);\n      return { datasets: [] };\n    }\n  },\n\n  /**\n   * Stop training\n   */\n  async stopTraining(sessionId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await apiRequest(\n        joinApiPath(API_BASE, `/training/${sessionId}/stop`),\n        { method: 'POST' }\n      );\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Stop training failed:', error);\n      return { success: false, message: 'Failed to stop training' };\n    }\n  }\n};\n"],"names":["trainingService","getModels","page","limit","params","URLSearchParams","toString","response","apiRequest","joinApiPath","API_BASE","API_ENDPOINTS","MODELS","json","error","console","models","pagination","total","pages","getModel","modelId","MODEL_BY_ID","id","name","type","status","accuracy","loss","epochs","current_epoch","dataset_id","config","createdAt","Date","toISOString","updatedAt","createModel","model","method","body","JSON","stringify","now","datasetId","updateModel","updates","success","ok","message","Error","deleteModel","startTraining","MODEL_TRAIN","sessionId","pauseTraining","resumeTraining","getTrainingSessions","endpoint","getTrainingSession","getModelLogs","getModelCheckpoints","startOptimization","options","loadModel","checkpointPath","getTrainingStats","totalModels","activeTraining","completedTraining","averageAccuracy","totalTrainingHours","getDatasets","datasets","stopTraining"],"mappings":"6DAgEO,MAAMA,EAAkB,CAI7B,eAAMC,CAAUC,EAAO,EAAGC,EAAQ,IAChC,IACE,MAAMC,EAAS,IAAIC,gBAAgB,CACjCH,KAAMA,EAAKI,WACXH,MAAOA,EAAMG,aAGTC,QAAiBC,EACrBC,EAAYC,EAAU,GAAGC,EAAcC,UAAUR,EAAOE,eAG1D,aADmBC,EAASM,MAE9B,OAASC,GAGP,OAFAC,QAAQD,MAAM,qBAAsBA,GAE7B,CACLE,OAAQ,GACRC,WAAY,CAAEf,OAAMC,QAAOe,MAAO,EAAGC,MAAO,GAEhD,CACF,EAKA,cAAMC,CAASC,GACb,IACE,MAAMd,QAAiBC,EACrBC,EAAYC,EAAUC,EAAcW,YAAYD,EAAQf,cAG1D,aADmBC,EAASM,MAE9B,OAASC,GAGP,OAFAC,QAAQD,MAAM,oBAAqBA,GAE5B,CACLS,GAAIF,EACJG,KAAM,cACNC,KAAM,eACNC,OAAQ,OACRC,SAAU,EACVC,KAAM,EACNC,OAAQ,EACRC,cAAe,EACfC,WAAY,GACZC,OAAQ,CAAA,EACRC,WAAA,IAAeC,MAAOC,cACtBC,WAAA,IAAeF,MAAOC,cAE1B,CACF,EAKA,iBAAME,CAAYC,GAChB,IACE,MAAM/B,QAAiBC,EACrBC,EAAYC,EAAUC,EAAcC,QACpC,CACE2B,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,KAIzB,aADmB/B,EAASM,MAE9B,OAASC,GAGP,OAFAC,QAAQD,MAAM,uBAAwBA,GAE/B,CACLS,GAAIW,KAAKS,MACTnB,KAAMc,EAAMd,KACZC,KAAMa,EAAMb,KACZC,OAAQ,OACRC,SAAU,EACVC,KAAM,EACNC,OAAQ,EACRC,cAAe,EACfc,UAAWN,EAAMM,WAAa,GAC9BZ,OAAQM,EAAMN,QAAU,CAAA,EACxBC,WAAA,IAAeC,MAAOC,cACtBC,WAAA,IAAeF,MAAOC,cAE1B,CACF,EAKA,iBAAMU,CAAYxB,EAAiByB,GACjC,IACE,MAAMvC,QAAiBC,EACrBC,EAAYC,EAAU,WAAWW,KACjC,CACEkB,OAAQ,MACRC,KAAMC,KAAKC,UAAUI,KAGzB,MAAO,CACLC,QAASxC,EAASyC,GAClBC,QAAS1C,EAASyC,GAAK,6BAA+B,yBAE1D,OAASlC,GAEP,MADAC,QAAQD,MAAM,uBAAwBA,GAChC,IAAIoC,MAAM,yBAClB,CACF,EAKA,iBAAMC,CAAY9B,GAChB,IACE,MAAMd,QAAiBC,EACrBC,EAAYC,EAAU,WAAWW,KACjC,CACEkB,OAAQ,WAGZ,MAAO,CACLQ,QAASxC,EAASyC,GAClBC,QAAS1C,EAASyC,GAAK,6BAA+B,yBAE1D,OAASlC,GAEP,MADAC,QAAQD,MAAM,uBAAwBA,GAChC,IAAIoC,MAAM,iBAClB,CACF,EAKA,mBAAME,CAAc/B,EAAiBW,GAMnC,IACE,MAAMzB,QAAiBC,EACrBC,EAAYC,EAAUC,EAAc0C,YAAYhC,EAAQf,aACxD,CACEiC,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,KAIzB,aADmBzB,EAASM,MAE9B,OAASC,GAGP,OAFAC,QAAQD,MAAM,yBAA0BA,GAEjC,CACLiC,SAAS,EACTE,QAAS,+BACTK,UAAW,WAAWpB,KAAKS,QAC3BX,SAEJ,CACF,EAKA,mBAAMuB,CAAclC,GAClB,IAOE,aANuBb,EACrBC,EAAYC,EAAU,WAAWW,WACjC,CACEkB,OAAQ,QAId,OAASzB,GAEP,MADAC,QAAQD,MAAM,yBAA0BA,GAClC,IAAIoC,MAAM,oBAClB,CACF,EAKA,oBAAMM,CAAenC,EAAiBW,GAMpC,IAaE,aAZuBxB,EAMrBC,EAAYC,EAAU,WAAWW,YACjC,CACEkB,OAAQ,OACRC,KAAMC,KAAKC,UAAUV,GAAU,CAAA,IAIrC,OAASlB,GAEP,MADAC,QAAQD,MAAM,0BAA2BA,GACnC,IAAIoC,MAAM,qBAClB,CACF,EAKA,yBAAMO,CAAoBpC,GACxB,IACE,MAAMqC,EAAWrC,EACb,WAAWA,aACX,qBAKJ,aAHuBb,EACrBC,EAAYC,EAAUgD,GAG1B,OAAS5C,GAEP,MADAC,QAAQD,MAAM,gCAAiCA,GACzC,IAAIoC,MAAM,4BAClB,CACF,EAKA,wBAAMS,CAAmBL,GACvB,IAIE,aAHuB9C,EACrBC,EAAYC,EAAU,sBAAsB4C,KAGhD,OAASxC,GAEP,MADAC,QAAQD,MAAM,+BAAgCA,GACxC,IAAIoC,MAAM,2BAClB,CACF,EAKA,kBAAMU,CAAavC,EAAiBnB,EAAO,EAAGC,EAAQ,IAYpD,IACE,MAAMC,EAAS,IAAIC,gBAAgB,CACjCH,KAAMA,EAAKI,WACXH,MAAOA,EAAMG,aAiBf,aAduBE,EAYrBC,EAAYC,EAAU,WAAWW,UAAgBjB,EAAOE,cAG5D,OAASQ,GAEP,MADAC,QAAQD,MAAM,yBAA0BA,GAClC,IAAIoC,MAAM,4BAClB,CACF,EAKA,yBAAMW,CAAoBxC,GAQxB,IAWE,aAVuBb,EAQrBC,EAAYC,EAAU,WAAWW,iBAGrC,OAASP,GAEP,MADAC,QAAQD,MAAM,gCAAiCA,GACzC,IAAIoC,MAAM,mCAClB,CACF,EAKA,uBAAMY,CAAkBzC,EAAiB0C,EAGrC,IAOF,IAcE,aAbuBvD,EAOrBC,EAAYC,EAAU,WAAWW,cACjC,CACEkB,OAAQ,OACRC,KAAMC,KAAKC,UAAUqB,IAI3B,OAASjD,GAEP,MADAC,QAAQD,MAAM,6BAA8BA,GACtC,IAAIoC,MAAM,yBAClB,CACF,EAKA,eAAMc,CAAU3C,EAAiB4C,GAM/B,IAaE,aAZuBzD,EAMrBC,EAAYC,EAAU,WAAWW,UACjC,CACEkB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEuB,oBAI7B,OAASnD,GAEP,MADAC,QAAQD,MAAM,qBAAsBA,GAC9B,IAAIoC,MAAM,sBAClB,CACF,EAKA,sBAAMgB,GAOJ,IAUE,aATuB1D,EAOrBC,EAAYC,EAAU,mBAG1B,OAASI,GAGP,OAFAC,QAAQD,MAAM,6BAA8BA,GAErC,CACLqD,YAAa,EACbC,eAAgB,EAChBC,kBAAmB,EACnBC,gBAAiB,EACjBC,mBAAoB,EAExB,CACF,EAKA,iBAAMC,GACJ,IACE,MAAMjE,QAAiBC,EAAWC,EAAYC,EAAU,cAExD,aADmBH,EAASM,MAE9B,OAASC,GAEP,OADAC,QAAQD,MAAM,uBAAwBA,GAC/B,CAAE2D,SAAU,GACrB,CACF,EAKA,kBAAMC,CAAapB,GACjB,IACE,MAAM/C,QAAiBC,EACrBC,EAAYC,EAAU,aAAa4C,UACnC,CAAEf,OAAQ,SAGZ,aADmBhC,EAASM,MAE9B,OAASC,GAEP,OADAC,QAAQD,MAAM,wBAAyBA,GAChC,CAAEiC,SAAS,EAAOE,QAAS,0BACpC,CACF"}