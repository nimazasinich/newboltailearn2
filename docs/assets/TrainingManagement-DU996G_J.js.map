{"version":3,"file":"TrainingManagement-DU996G_J.js","sources":["../../src/services/ai/TensorFlowIntegration.ts","../../src/components/TrainingManagement.tsx"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nexport interface TensorFlowTrainingConfig {\n  epochs: number;\n  batchSize: number;\n  learningRate: number;\n  validationSplit?: number;\n  earlyStopping?: boolean;\n  patience?: number;\n  modelType?: 'sequential' | 'functional';\n  layers?: LayerConfig[];\n}\n\nexport interface LayerConfig {\n  type: 'dense' | 'conv2d' | 'lstm' | 'dropout' | 'batchNormalization';\n  units?: number;\n  activation?: string;\n  kernelSize?: number[];\n  filters?: number;\n  dropout?: number;\n  returnSequences?: boolean;\n}\n\nexport interface TrainingProgress {\n  epoch: number;\n  loss: number;\n  accuracy: number;\n  valLoss?: number;\n  valAccuracy?: number;\n  progress: number;\n}\n\nexport interface ModelMetrics {\n  totalParams: number;\n  trainableParams: number;\n  nonTrainableParams: number;\n  modelSize: number; // in MB\n  trainingTime: number; // in seconds\n  finalAccuracy: number;\n  finalLoss: number;\n}\n\nexport class TensorFlowTrainingEngine {\n  private model: tf.LayersModel | null = null;\n  private trainingHistory: TrainingProgress[] = [];\n  private isTraining = false;\n  private currentEpoch = 0;\n  private totalEpochs = 0;\n\n  constructor() {\n    // Initialize TensorFlow backend\n    tf.ready().then(() => {\n      console.log('TensorFlow.js backend ready');\n    });\n  }\n\n  /**\n   * Create a new model based on configuration\n   */\n  createModel(config: TensorFlowTrainingConfig): tf.LayersModel {\n    const model = tf.sequential();\n    \n    // Add layers based on configuration\n    if (config.layers && config.layers.length > 0) {\n      config.layers.forEach(layerConfig => {\n        switch (layerConfig.type) {\n          case 'dense':\n            model.add(tf.layers.dense({\n              units: layerConfig.units || 128,\n              activation: (layerConfig.activation || 'relu') as any,\n              inputShape: layerConfig.units === config.layers![0].units ? [784] : undefined\n            }));\n            break;\n          case 'dropout':\n            model.add(tf.layers.dropout({\n              rate: layerConfig.dropout || 0.2\n            }));\n            break;\n          case 'batchNormalization':\n            model.add(tf.layers.batchNormalization());\n            break;\n        }\n      });\n    } else {\n      // Default architecture for Persian legal document classification\n      model.add(tf.layers.dense({\n        units: 512,\n        activation: 'relu',\n        inputShape: [768] // BERT embedding size\n      }));\n      model.add(tf.layers.dropout({ rate: 0.3 }));\n      model.add(tf.layers.dense({\n        units: 256,\n        activation: 'relu'\n      }));\n      model.add(tf.layers.dropout({ rate: 0.2 }));\n      model.add(tf.layers.dense({\n        units: 128,\n        activation: 'relu'\n      }));\n      model.add(tf.layers.dense({\n        units: 10, // Number of legal document categories\n        activation: 'softmax'\n      }));\n    }\n\n    // Compile the model\n    model.compile({\n      optimizer: tf.train.adam(config.learningRate),\n      loss: 'categoricalCrossentropy',\n      metrics: ['accuracy']\n    });\n\n    this.model = model;\n    return model;\n  }\n\n  /**\n   * Train the model with progress tracking\n   */\n  async trainModel(\n    xTrain: tf.Tensor,\n    yTrain: tf.Tensor,\n    config: TensorFlowTrainingConfig,\n    onProgress?: (progress: TrainingProgress) => void\n  ): Promise<ModelMetrics> {\n    if (!this.model) {\n      throw new Error('Model not created. Call createModel() first.');\n    }\n\n    this.isTraining = true;\n    this.currentEpoch = 0;\n    this.totalEpochs = config.epochs;\n    this.trainingHistory = [];\n\n    const startTime = Date.now();\n    \n    // Prepare validation data if validation split is specified\n    let xVal: tf.Tensor | undefined;\n    let yVal: tf.Tensor | undefined;\n\n    try {\n      \n      if (config.validationSplit && config.validationSplit > 0) {\n        const xShape = xTrain.shape;\n        const yShape = yTrain.shape;\n        if (xShape[0] && xShape[1] && yShape[0] && yShape[1]) {\n          const splitIndex = Math.floor(xShape[0] * (1 - config.validationSplit));\n          xVal = xTrain.slice([splitIndex, 0], [xShape[0] - splitIndex, xShape[1]]);\n          yVal = yTrain.slice([splitIndex, 0], [yShape[0] - splitIndex, yShape[1]]);\n          xTrain = xTrain.slice([0, 0], [splitIndex, xShape[1]]);\n          yTrain = yTrain.slice([0, 0], [splitIndex, yShape[1]]);\n        }\n      }\n\n      // Training loop\n      for (let epoch = 0; epoch < config.epochs; epoch++) {\n        if (!this.isTraining) break;\n\n        this.currentEpoch = epoch;\n        \n        // Train for one epoch\n        const history = await this.model.fit(xTrain, yTrain, {\n          epochs: 1,\n          batchSize: config.batchSize,\n          validationData: xVal && yVal ? [xVal, yVal] : undefined,\n          verbose: 0\n        });\n\n        const loss = history.history.loss[0] as number;\n        const accuracy = history.history.acc[0] as number;\n        const valLoss = history.history.val_loss ? history.history.val_loss[0] as number : undefined;\n        const valAccuracy = history.history.val_acc ? history.history.val_acc[0] as number : undefined;\n\n        const progress: TrainingProgress = {\n          epoch: epoch + 1,\n          loss,\n          accuracy,\n          valLoss,\n          valAccuracy,\n          progress: ((epoch + 1) / config.epochs) * 100\n        };\n\n        this.trainingHistory.push(progress);\n\n        // Call progress callback\n        if (onProgress) {\n          onProgress(progress);\n        }\n\n        // Early stopping check\n        if (config.earlyStopping && config.patience) {\n          if (this.shouldStopEarly(config.patience)) {\n            console.log(`Early stopping at epoch ${epoch + 1}`);\n            break;\n          }\n        }\n      }\n\n      const endTime = Date.now();\n      const trainingTime = (endTime - startTime) / 1000;\n\n      // Calculate model metrics\n      const totalParams = this.model.countParams();\n      const metrics: ModelMetrics = {\n        totalParams,\n        trainableParams: Math.floor(totalParams * 0.8), // Estimate\n        nonTrainableParams: Math.floor(totalParams * 0.2), // Estimate\n        modelSize: this.calculateModelSize(),\n        trainingTime,\n        finalAccuracy: this.trainingHistory[this.trainingHistory.length - 1]?.accuracy || 0,\n        finalLoss: this.trainingHistory[this.trainingHistory.length - 1]?.loss || 0\n      };\n\n      return metrics;\n\n    } finally {\n      this.isTraining = false;\n      // Clean up tensors\n      xTrain.dispose();\n      yTrain.dispose();\n      if (xVal) xVal.dispose();\n      if (yVal) yVal.dispose();\n    }\n  }\n\n  /**\n   * Pause training\n   */\n  pauseTraining(): void {\n    this.isTraining = false;\n  }\n\n  /**\n   * Resume training\n   */\n  resumeTraining(): void {\n    this.isTraining = true;\n  }\n\n  /**\n   * Stop training\n   */\n  stopTraining(): void {\n    this.isTraining = false;\n  }\n\n  /**\n   * Get training history\n   */\n  getTrainingHistory(): TrainingProgress[] {\n    return [...this.trainingHistory];\n  }\n\n  /**\n   * Save model\n   */\n  async saveModel(path: string): Promise<void> {\n    if (!this.model) {\n      throw new Error('No model to save');\n    }\n    await this.model.save(`file://${path}`);\n  }\n\n  /**\n   * Load model\n   */\n  async loadModel(path: string): Promise<void> {\n    this.model = await tf.loadLayersModel(`file://${path}`);\n  }\n\n  /**\n   * Get model summary\n   */\n  getModelSummary(): string {\n    if (!this.model) {\n      return 'No model loaded';\n    }\n    this.model.summary();\n    return 'Model summary printed to console';\n  }\n\n  /**\n   * Predict with the model\n   */\n  predict(input: tf.Tensor): tf.Tensor {\n    if (!this.model) {\n      throw new Error('No model loaded');\n    }\n    return this.model.predict(input) as tf.Tensor;\n  }\n\n  /**\n   * Dispose of the model and free memory\n   */\n  dispose(): void {\n    if (this.model) {\n      this.model.dispose();\n      this.model = null;\n    }\n    this.trainingHistory = [];\n  }\n\n  private shouldStopEarly(patience: number): boolean {\n    if (this.trainingHistory.length < patience + 1) {\n      return false;\n    }\n\n    const recentHistory = this.trainingHistory.slice(-patience - 1);\n    const bestValLoss = Math.min(...recentHistory.map(h => h.valLoss || h.loss));\n    const currentValLoss = recentHistory[recentHistory.length - 1].valLoss || recentHistory[recentHistory.length - 1].loss;\n\n    return currentValLoss > bestValLoss;\n  }\n\n  private calculateModelSize(): number {\n    if (!this.model) return 0;\n    \n    // Rough estimation of model size in MB\n    const totalParams = this.model.countParams();\n    const bytesPerParam = 4; // Assuming float32\n    const totalBytes = totalParams * bytesPerParam;\n    return totalBytes / (1024 * 1024); // Convert to MB\n  }\n}\n\n// Export singleton instance\nexport const tensorFlowEngine = new TensorFlowTrainingEngine();","import React, { useState, useEffect } from 'react';\nimport { ModernCard } from './ui/ModernCard';\nimport { SlimBadge } from './ui/SlimBadge';\nimport { Progress } from './ui/Progress';\nimport { Button } from './ui/Button';\nimport { trainingService } from '../services/training';\nimport { tensorFlowEngine, TensorFlowTrainingConfig, TrainingProgress } from '../services/ai/TensorFlowIntegration';\nimport { TrainingSession, QueuedTraining } from '../types/training';\nimport * as tf from '@tensorflow/tfjs';\nimport { \n  Play, \n  Pause, \n  Square, \n  Settings, \n  Brain, \n  Database,\n  Clock,\n  Target,\n  Zap,\n  Plus,\n  Eye,\n  Download,\n  TrendingUp,\n  BarChart3,\n  Activity,\n  CheckCircle,\n  AlertCircle,\n  RefreshCw\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\n\n// Enhanced Training Management Component with Real API Integration\nexport default function TrainingManagement() {\n  const [trainingSessions, setTrainingSessions] = useState<any[]>([]);\n  const [models, setModels] = useState<any[]>([]);\n  const [datasets, setDatasets] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedModel, setSelectedModel] = useState<any>(null);\n  const [trainingConfig, setTrainingConfig] = useState<TensorFlowTrainingConfig>({\n    epochs: 50,\n    batchSize: 32,\n    learningRate: 0.001,\n    validationSplit: 0.2,\n    earlyStopping: true,\n    patience: 5\n  });\n  const [isTraining, setIsTraining] = useState(false);\n  const [trainingProgress, setTrainingProgress] = useState<TrainingProgress | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [activeSessions, setActiveSessions] = useState<TrainingSession[]>([]);\n  const [trainingQueue, setTrainingQueue] = useState<QueuedTraining[]>([]);\n\n  // Load initial data\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Load models, datasets, and training sessions\n      const [modelsData, datasetsData, sessionsData] = await Promise.all([\n        trainingService.getModels(),\n        trainingService.getDatasets(),\n        trainingService.getTrainingSessions()\n      ]);\n      \n      setModels(modelsData.models || []);\n      setDatasets(datasetsData.datasets || []);\n      setTrainingSessions(sessionsData || []);\n    } catch (err) {\n      console.error('Failed to load training data:', err);\n      setError('خطا در بارگذاری داده‌ها');\n      // Use mock data as fallback\n      setTrainingSessions(MOCK_TRAINING_SESSIONS);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStartTraining = async (modelId: number) => {\n    try {\n      setIsTraining(true);\n      setTrainingProgress(null);\n      \n      const result = await trainingService.startTraining(modelId, {\n        epochs: trainingConfig.epochs,\n        batchSize: trainingConfig.batchSize,\n        learningRate: trainingConfig.learningRate,\n        validationSplit: trainingConfig.validationSplit,\n        earlyStopping: trainingConfig.earlyStopping,\n        patience: trainingConfig.patience\n      });\n      \n      if (result.success) {\n        // Start TensorFlow training with progress tracking\n        await startTensorFlowTraining(modelId, trainingConfig);\n      }\n    } catch (err) {\n      console.error('Failed to start training:', err);\n      setError('خطا در شروع آموزش');\n    }\n  };\n\n  const startTensorFlowTraining = async (modelId: number, config: TensorFlowTrainingConfig) => {\n    try {\n      // Create model\n      const model = tensorFlowEngine.createModel(config);\n      \n      // Generate mock training data (in real implementation, this would come from datasets)\n      const xTrain = tf.randomNormal([1000, 768]); // Mock BERT embeddings\n      const yTrain = tf.oneHot(tf.randomUniform([1000], 0, 10, 'int32'), 10);\n      \n      // Train with progress tracking\n      const metrics = await tensorFlowEngine.trainModel(\n        xTrain,\n        yTrain,\n        config,\n        (progress) => {\n          setTrainingProgress(progress);\n        }\n      );\n      \n      console.log('Training completed:', metrics);\n      setIsTraining(false);\n      setTrainingProgress(null);\n      \n      // Refresh data\n      await loadData();\n    } catch (err) {\n      console.error('TensorFlow training failed:', err);\n      setError('خطا در آموزش TensorFlow');\n      setIsTraining(false);\n    }\n  };\n\n  const handlePauseTraining = async (modelId: number) => {\n    try {\n      await trainingService.pauseTraining(modelId);\n      tensorFlowEngine.pauseTraining();\n      await loadData();\n    } catch (err) {\n      console.error('Failed to pause training:', err);\n      setError('خطا در توقف آموزش');\n    }\n  };\n\n  const handleResumeTraining = async (modelId: number) => {\n    try {\n      await trainingService.resumeTraining(modelId);\n      tensorFlowEngine.resumeTraining();\n      await loadData();\n    } catch (err) {\n      console.error('Failed to resume training:', err);\n      setError('خطا در ادامه آموزش');\n    }\n  };\n\n  const handleStopTraining = async (modelId: number) => {\n    try {\n      await trainingService.stopTraining(String(modelId));\n      tensorFlowEngine.stopTraining();\n      setIsTraining(false);\n      setTrainingProgress(null);\n      await loadData();\n    } catch (err) {\n      console.error('Failed to stop training:', err);\n      setError('خطا در متوقف کردن آموزش');\n    }\n  };\n\n// Mock Data برای Training Management (fallback)\nconst MOCK_TRAINING_SESSIONS = [\n  {\n    id: 1,\n    model_name: 'Persian BERT Legal v3.0',\n    model_type: 'persian-bert',\n    dataset: 'Legal QA Persian Extended',\n    status: 'training',\n    progress: 64,\n    current_epoch: 32,\n    total_epochs: 50,\n    accuracy: 0.89,\n    loss: 0.23,\n    learning_rate: 0.001,\n    batch_size: 32,\n    estimated_completion: '2h 15m',\n    elapsed_time: '1h 45m',\n    started_at: new Date(Date.now() - 6300000).toISOString(),\n    gpu_usage: 85,\n    memory_usage: 12.4\n  },\n  {\n    id: 2,\n    model_name: 'Contract Analyzer Pro',\n    model_type: 'dora',\n    dataset: 'Contract Analysis Dataset',\n    status: 'training',\n    progress: 28,\n    current_epoch: 14,\n    total_epochs: 50,\n    accuracy: 0.76,\n    loss: 0.45,\n    learning_rate: 0.0005,\n    batch_size: 16,\n    estimated_completion: '4h 30m',\n    elapsed_time: '1h 20m',\n    started_at: new Date(Date.now() - 4800000).toISOString(),\n    gpu_usage: 72,\n    memory_usage: 8.2\n  },\n  {\n    id: 3,\n    model_name: 'Legal Document Classifier',\n    model_type: 'qr-adaptor',\n    dataset: 'Legal Documents Collection',\n    status: 'paused',\n    progress: 45,\n    current_epoch: 18,\n    total_epochs: 40,\n    accuracy: 0.82,\n    loss: 0.31,\n    learning_rate: 0.002,\n    batch_size: 64,\n    estimated_completion: 'متوقف شده',\n    elapsed_time: '2h 10m',\n    started_at: new Date(Date.now() - 8400000).toISOString(),\n    gpu_usage: 0,\n    memory_usage: 0\n  }\n];\n\nconst MOCK_TRAINING_QUEUE = [\n  {\n    id: 4,\n    model_name: 'Case Law Predictor v2',\n    model_type: 'persian-bert',\n    dataset: 'Case Law Database',\n    priority: 'high',\n    estimated_duration: '6h',\n    scheduled_for: new Date(Date.now() + 3600000).toISOString()\n  },\n  {\n    id: 5,\n    model_name: 'Legal Summarizer',\n    model_type: 'dora',\n    dataset: 'Legal Documents',\n    priority: 'medium',\n    estimated_duration: '4h',\n    scheduled_for: new Date(Date.now() + 7200000).toISOString()\n  }\n];\n\nconst MOCK_TRAINING_HISTORY = Array.from({ length: 10 }, (_, i) => ({\n  date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toLocaleDateString('fa-IR'),\n  sessions: Math.floor(Math.random() * 5) + 1,\n  avg_accuracy: Math.random() * 0.2 + 0.8,\n  total_time: Math.floor(Math.random() * 8) + 2\n}));\n\nconst MOCK_MODEL_PERFORMANCE = [\n  { name: 'Persian BERT', accuracy: 94, training_time: 8.5, efficiency: 92 },\n  { name: 'DORA', accuracy: 89, training_time: 6.2, efficiency: 88 },\n  { name: 'QR Adaptor', accuracy: 85, training_time: 4.8, efficiency: 85 }\n];\n\nconst MOCK_RESOURCE_USAGE = Array.from({ length: 24 }, (_, i) => ({\n  hour: `${i}:00`,\n  gpu_usage: Math.floor(Math.random() * 40) + 30,\n  memory_usage: Math.floor(Math.random() * 30) + 40,\n  cpu_usage: Math.floor(Math.random() * 25) + 25\n}));\n\n  // Update active sessions when training sessions change\n  useEffect(() => {\n    setActiveSessions(trainingSessions.filter(session => \n      session.status === 'training' || session.status === 'paused'\n    ));\n  }, [trainingSessions]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'training': return 'info';\n      case 'paused': return 'warning';\n      case 'completed': return 'success';\n      case 'failed': return 'error';\n      default: return 'neutral';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'training': return <Play className=\"w-3 h-3\" />;\n      case 'paused': return <Pause className=\"w-3 h-3\" />;\n      case 'completed': return <CheckCircle className=\"w-3 h-3\" />;\n      case 'failed': return <AlertCircle className=\"w-3 h-3\" />;\n      default: return <Clock className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'training': return 'در حال آموزش';\n      case 'paused': return 'متوقف شده';\n      case 'completed': return 'تکمیل شده';\n      case 'failed': return 'ناموفق';\n      default: return 'نامشخص';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'neutral';\n      default: return 'neutral';\n    }\n  };\n\n  // آمار کلی\n  const stats = {\n    active: activeSessions.filter(s => s.status === 'training').length,\n    paused: activeSessions.filter(s => s.status === 'paused').length,\n    queued: trainingQueue.length,\n    avgAccuracy: activeSessions.reduce((sum, s) => sum + (s.accuracy || 0), 0) / activeSessions.length * 100,\n    totalGpuUsage: activeSessions.reduce((sum, s) => sum + (s.gpu_usage || 0), 0),\n    totalMemoryUsage: activeSessions.reduce((sum, s) => sum + (s.memory_usage || 0), 0)\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-light text-slate-900 dark:text-slate-100 mb-2\">\n              آموزش مدل‌ها\n            </h1>\n            <p className=\"text-lg text-slate-600 dark:text-slate-400\">\n              مدیریت و نظارت بر فرآیند آموزش مدل‌های هوش مصنوعی\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\" className=\"rounded-xl\">\n              <Settings className=\"w-4 h-4 ml-2\" />\n              تنظیمات آموزش\n            </Button>\n            <Button onClick={() => setShowCreateModal(true)} className=\"rounded-xl bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700\">\n              <Plus className=\"w-4 h-4 ml-2\" />\n              آموزش جدید\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-blue-400 to-blue-600 rounded-2xl mb-4\">\n              <Activity className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.active}</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">در حال آموزش</p>\n            <div className=\"mt-2\">\n              <SlimBadge variant=\"info\" size=\"xs\">فعال</SlimBadge>\n            </div>\n          </ModernCard>\n\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-2xl mb-4\">\n              <Target className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.avgAccuracy.toFixed(1)}%</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">میانگین دقت</p>\n            <div className=\"flex items-center justify-center gap-1 mt-2\">\n              <TrendingUp className=\"w-4 h-4 text-emerald-500\" />\n              <span className=\"text-sm text-emerald-600\">+2.3%</span>\n            </div>\n          </ModernCard>\n\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-purple-400 to-purple-600 rounded-2xl mb-4\">\n              <Zap className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.totalGpuUsage}%</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">استفاده GPU</p>\n            <div className=\"mt-2\">\n              <SlimBadge variant={stats.totalGpuUsage > 80 ? 'warning' : 'success'} size=\"xs\">\n                {stats.totalGpuUsage > 80 ? 'بالا' : 'نرمال'}\n              </SlimBadge>\n            </div>\n          </ModernCard>\n\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-amber-400 to-amber-600 rounded-2xl mb-4\">\n              <Clock className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.queued}</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">در صف انتظار</p>\n            <div className=\"mt-2\">\n              <SlimBadge variant=\"neutral\" size=\"xs\">آماده</SlimBadge>\n            </div>\n          </ModernCard>\n        </div>\n\n        {/* Active Training Sessions */}\n        <ModernCard variant=\"outlined\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n              <Brain className=\"w-5 h-5 text-purple-500\" />\n              جلسات آموزش فعال\n            </h3>\n            <SlimBadge variant=\"info\">{stats.active} فعال</SlimBadge>\n          </div>\n          <div className=\"space-y-6\">\n            {activeSessions.map((session) => (\n              <div key={session.id} className=\"p-6 bg-slate-50 dark:bg-slate-800 rounded-xl\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center\">\n                      <Brain className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n                        {session.model_name}\n                      </h4>\n                      <p className=\"text-slate-600 dark:text-slate-400\">\n                        {session.modelType} • {session.dataset}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <SlimBadge variant={getStatusColor(session.status)}>\n                      {getStatusIcon(session.status)}\n                      {getStatusText(session.status)}\n                    </SlimBadge>\n                  </div>\n                </div>\n\n                {/* Progress */}\n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">پیشرفت آموزش</span>\n                    <span className=\"font-medium\">{session.current_epoch}/{session.total_epochs} epochs</span>\n                  </div>\n                  <Progress value={session.progress.completionPercentage} className=\"h-3\" />\n                  <div className=\"flex justify-between text-xs text-slate-500\">\n                    <span>دقت: {((session.accuracy || 0) * 100).toFixed(1)}%</span>\n                    <span>خطا: {(session.loss || 0).toFixed(3)}</span>\n                    <span>زمان باقی‌مانده: {session.estimated_completion}</span>\n                  </div>\n                </div>\n\n                {/* Stats Grid */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.learning_rate}</div>\n                    <div className=\"text-xs text-slate-500\">Learning Rate</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.batch_size}</div>\n                    <div className=\"text-xs text-slate-500\">Batch Size</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.gpu_usage}%</div>\n                    <div className=\"text-xs text-slate-500\">GPU Usage</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.memory_usage}GB</div>\n                    <div className=\"text-xs text-slate-500\">Memory</div>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center gap-3\">\n                  {session.status === 'training' && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"rounded-lg\"\n                      onClick={() => handlePauseTraining(Number(session.id))}\n                    >\n                      <Pause className=\"w-3 h-3 ml-1\" />\n                      توقف\n                    </Button>\n                  )}\n                  {session.status === 'paused' && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"rounded-lg\"\n                      onClick={() => handleResumeTraining(Number(session.id))}\n                    >\n                      <Play className=\"w-3 h-3 ml-1\" />\n                      ادامه\n                    </Button>\n                  )}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"rounded-lg\"\n                    onClick={() => handleStopTraining(Number(session.id))}\n                    disabled={session.status === 'completed'}\n                  >\n                    <Square className=\"w-3 h-3 ml-1\" />\n                    توقف کامل\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"rounded-lg\">\n                    <Eye className=\"w-3 h-3 ml-1\" />\n                    جزئیات\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"rounded-lg\">\n                    <Settings className=\"w-3 h-3 ml-1\" />\n                    تنظیمات\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ModernCard>\n\n        {/* Training Progress Display */}\n        {isTraining && trainingProgress && (\n          <ModernCard variant=\"outlined\" className=\"mb-8\">\n            <div className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Activity className=\"w-5 h-5 text-green-500\" />\n                پیشرفت آموزش\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{trainingProgress.epoch}</div>\n                  <div className=\"text-sm text-slate-600\">دوره فعلی</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{(trainingProgress.accuracy * 100).toFixed(1)}%</div>\n                  <div className=\"text-sm text-slate-600\">دقت</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">{trainingProgress.loss.toFixed(3)}</div>\n                  <div className=\"text-sm text-slate-600\">خطا</div>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <Progress value={trainingProgress.progress} className=\"h-2\" />\n                <div className=\"text-sm text-slate-600 mt-2 text-center\">\n                  {trainingProgress.progress.toFixed(1)}% تکمیل شده\n                </div>\n              </div>\n            </div>\n          </ModernCard>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <ModernCard variant=\"outlined\" className=\"mb-8 border-red-200 bg-red-50\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center gap-2 text-red-600\">\n                <AlertCircle className=\"w-5 h-5\" />\n                <span className=\"font-medium\">خطا</span>\n              </div>\n              <p className=\"text-red-700 mt-2\">{error}</p>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"mt-3\"\n                onClick={() => setError(null)}\n              >\n                بستن\n              </Button>\n            </div>\n          </ModernCard>\n        )}\n\n        {/* Charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Training History */}\n          <ModernCard variant=\"outlined\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-blue-500\" />\n                تاریخچه آموزش\n              </h3>\n              <SlimBadge variant=\"neutral\">10 روز گذشته</SlimBadge>\n            </div>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={MOCK_TRAINING_HISTORY.slice().reverse()}>\n                  <defs>\n                    <linearGradient id=\"sessionsGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n                      <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n                  <XAxis \n                    dataKey=\"date\" \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'white',\n                      border: '1px solid #e2e8f0',\n                      borderRadius: '12px'\n                    }}\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"sessions\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    fill=\"url(#sessionsGradient)\"\n                    name=\"جلسات آموزش\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </ModernCard>\n\n          {/* Resource Usage */}\n          <ModernCard variant=\"outlined\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-purple-500\" />\n                استفاده از منابع\n              </h3>\n              <SlimBadge variant=\"warning\">زنده</SlimBadge>\n            </div>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={MOCK_RESOURCE_USAGE.slice(-12)}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n                  <XAxis \n                    dataKey=\"hour\" \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'white',\n                      border: '1px solid #e2e8f0',\n                      borderRadius: '12px'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"gpu_usage\" \n                    stroke=\"#8b5cf6\" \n                    strokeWidth={2}\n                    name=\"GPU (%)\"\n                    dot={false}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"memory_usage\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    name=\"Memory (%)\"\n                    dot={false}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </ModernCard>\n        </div>\n\n        {/* Training Queue */}\n        <ModernCard variant=\"outlined\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n              <Clock className=\"w-5 h-5 text-amber-500\" />\n              صف آموزش\n            </h3>\n            <SlimBadge variant=\"neutral\">{trainingQueue.length} در انتظار</SlimBadge>\n          </div>\n          <div className=\"space-y-4\">\n            {trainingQueue.map((item) => (\n              <div key={item.id} className=\"flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800 rounded-xl\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-10 h-10 bg-amber-100 dark:bg-amber-900/30 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"w-5 h-5 text-amber-600 dark:text-amber-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">{item.model_name}</h4>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      {item.modelType} • {item.dataset}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <SlimBadge variant={getPriorityColor(item.priority)} size=\"sm\">\n                    {item.priority === 'high' ? 'اولویت بالا' : \n                     item.priority === 'medium' ? 'اولویت متوسط' : 'اولویت پایین'}\n                  </SlimBadge>\n                  <div className=\"text-sm text-slate-500\">\n                    زمان تخمینی: {item.estimatedDuration || item.estimated_duration}\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"rounded-lg\">\n                    <Play className=\"w-3 h-3 ml-1\" />\n                    شروع فوری\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ModernCard>\n\n        {/* Create Training Modal Placeholder */}\n        {showCreateModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n            <ModernCard className=\"w-full max-w-2xl\">\n              <div className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\">شروع آموزش جدید</h3>\n                <p className=\"text-slate-600 mb-6\">فرم ایجاد جلسه آموزش در حال توسعه است...</p>\n                <div className=\"flex justify-end gap-3\">\n                  <Button variant=\"outline\" onClick={() => setShowCreateModal(false)}>\n                    انصراف\n                  </Button>\n                  <Button onClick={() => setShowCreateModal(false)}>\n                    شروع آموزش\n                  </Button>\n                </div>\n              </div>\n            </ModernCard>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["tensorFlowEngine","constructor","this","model","trainingHistory","isTraining","currentEpoch","totalEpochs","tf.ready","then","console","log","createModel","config","tf.sequential","layers","length","forEach","layerConfig","type","add","tf.layers.dense","units","activation","inputShape","tf.layers.dropout","rate","dropout","tf.layers.batchNormalization","compile","optimizer","tf.train","adam","learningRate","loss","metrics","trainModel","xTrain","yTrain","onProgress","Error","epochs","startTime","Date","now","xVal","yVal","validationSplit","xShape","shape","yShape","splitIndex","Math","floor","slice","epoch","history","fit","batchSize","validationData","verbose","accuracy","acc","valLoss","val_loss","progress","valAccuracy","val_acc","push","earlyStopping","patience","shouldStopEarly","trainingTime","totalParams","countParams","trainableParams","nonTrainableParams","modelSize","calculateModelSize","finalAccuracy","finalLoss","dispose","pauseTraining","resumeTraining","stopTraining","getTrainingHistory","saveModel","path","save","loadModel","tf.loadLayersModel","getModelSummary","summary","predict","input","recentHistory","bestValLoss","min","map","h","TrainingManagement","trainingSessions","setTrainingSessions","useState","models","setModels","datasets","setDatasets","loading","setLoading","error","setError","selectedModel","setSelectedModel","trainingConfig","setTrainingConfig","setIsTraining","trainingProgress","setTrainingProgress","showCreateModal","setShowCreateModal","activeSessions","setActiveSessions","trainingQueue","setTrainingQueue","useEffect","loadData","async","modelsData","datasetsData","sessionsData","Promise","all","trainingService","getModels","getDatasets","getTrainingSessions","err","MOCK_TRAINING_SESSIONS","id","model_name","model_type","dataset","status","current_epoch","total_epochs","learning_rate","batch_size","estimated_completion","elapsed_time","started_at","toISOString","gpu_usage","memory_usage","MOCK_TRAINING_HISTORY","Array","from","_","i","date","toLocaleDateString","sessions","random","avg_accuracy","total_time","MOCK_RESOURCE_USAGE","hour","cpu_usage","filter","session","getStatusColor","getStatusIcon","jsx","Play","className","Pause","CheckCircle","AlertCircle","Clock","getStatusText","getPriorityColor","priority","stats","active","s","paused","queued","avgAccuracy","reduce","sum","totalGpuUsage","totalMemoryUsage","children","jsxs","Button","variant","Settings","onClick","Plus","ModernCard","Activity","SlimBadge","size","Target","toFixed","TrendingUp","Zap","Brain","modelType","Progress","value","completionPercentage","modelId","handlePauseTraining","Number","handleResumeTraining","String","handleStopTraining","disabled","Square","Eye","BarChart3","ResponsiveContainer","width","height","AreaChart","data","reverse","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tick","fontSize","YAxis","Tooltip","contentStyle","backgroundColor","border","borderRadius","Area","strokeWidth","fill","name","LineChart","Line","dot","item","estimatedDuration","estimated_duration"],"mappings":"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"}