{"version":3,"file":"TrainingManagement-4f37cd2b.js","sources":["../../src/services/ai/TensorFlowIntegration.ts","../../src/components/TrainingManagement.tsx"],"sourcesContent":["import * as tf from '@tensorflow/tfjs';\n\nexport interface TensorFlowTrainingConfig {\n  epochs: number;\n  batchSize: number;\n  learningRate: number;\n  validationSplit?: number;\n  earlyStopping?: boolean;\n  patience?: number;\n  modelType?: 'sequential' | 'functional';\n  layers?: LayerConfig[];\n}\n\nexport interface LayerConfig {\n  type: 'dense' | 'conv2d' | 'lstm' | 'dropout' | 'batchNormalization';\n  units?: number;\n  activation?: string;\n  kernelSize?: number[];\n  filters?: number;\n  dropout?: number;\n  returnSequences?: boolean;\n}\n\nexport interface TrainingProgress {\n  epoch: number;\n  loss: number;\n  accuracy: number;\n  valLoss?: number;\n  valAccuracy?: number;\n  progress: number;\n}\n\nexport interface ModelMetrics {\n  totalParams: number;\n  trainableParams: number;\n  nonTrainableParams: number;\n  modelSize: number; // in MB\n  trainingTime: number; // in seconds\n  finalAccuracy: number;\n  finalLoss: number;\n}\n\nexport class TensorFlowTrainingEngine {\n  private model: tf.LayersModel | null = null;\n  private trainingHistory: TrainingProgress[] = [];\n  private isTraining = false;\n  private currentEpoch = 0;\n  private totalEpochs = 0;\n\n  constructor() {\n    // Initialize TensorFlow backend\n    tf.ready().then(() => {\n      console.log('TensorFlow.js backend ready');\n    });\n  }\n\n  /**\n   * Create a new model based on configuration\n   */\n  createModel(config: TensorFlowTrainingConfig): tf.LayersModel {\n    const model = tf.sequential();\n    \n    // Add layers based on configuration\n    if (config.layers && config.layers.length > 0) {\n      config.layers.forEach(layerConfig => {\n        switch (layerConfig.type) {\n          case 'dense':\n            model.add(tf.layers.dense({\n              units: layerConfig.units || 128,\n              activation: layerConfig.activation || 'relu',\n              inputShape: layerConfig.units === config.layers![0].units ? [784] : undefined\n            }));\n            break;\n          case 'dropout':\n            model.add(tf.layers.dropout({\n              rate: layerConfig.dropout || 0.2\n            }));\n            break;\n          case 'batchNormalization':\n            model.add(tf.layers.batchNormalization());\n            break;\n        }\n      });\n    } else {\n      // Default architecture for Persian legal document classification\n      model.add(tf.layers.dense({\n        units: 512,\n        activation: 'relu',\n        inputShape: [768] // BERT embedding size\n      }));\n      model.add(tf.layers.dropout({ rate: 0.3 }));\n      model.add(tf.layers.dense({\n        units: 256,\n        activation: 'relu'\n      }));\n      model.add(tf.layers.dropout({ rate: 0.2 }));\n      model.add(tf.layers.dense({\n        units: 128,\n        activation: 'relu'\n      }));\n      model.add(tf.layers.dense({\n        units: 10, // Number of legal document categories\n        activation: 'softmax'\n      }));\n    }\n\n    // Compile the model\n    model.compile({\n      optimizer: tf.train.adam(config.learningRate),\n      loss: 'categoricalCrossentropy',\n      metrics: ['accuracy']\n    });\n\n    this.model = model;\n    return model;\n  }\n\n  /**\n   * Train the model with progress tracking\n   */\n  async trainModel(\n    xTrain: tf.Tensor,\n    yTrain: tf.Tensor,\n    config: TensorFlowTrainingConfig,\n    onProgress?: (progress: TrainingProgress) => void\n  ): Promise<ModelMetrics> {\n    if (!this.model) {\n      throw new Error('Model not created. Call createModel() first.');\n    }\n\n    this.isTraining = true;\n    this.currentEpoch = 0;\n    this.totalEpochs = config.epochs;\n    this.trainingHistory = [];\n\n    const startTime = Date.now();\n\n    try {\n      // Prepare validation data if validation split is specified\n      let xVal: tf.Tensor | undefined;\n      let yVal: tf.Tensor | undefined;\n      \n      if (config.validationSplit && config.validationSplit > 0) {\n        const splitIndex = Math.floor(xTrain.shape[0] * (1 - config.validationSplit));\n        xVal = xTrain.slice([splitIndex, 0], [xTrain.shape[0] - splitIndex, xTrain.shape[1]]);\n        yVal = yTrain.slice([splitIndex, 0], [yTrain.shape[0] - splitIndex, yTrain.shape[1]]);\n        xTrain = xTrain.slice([0, 0], [splitIndex, xTrain.shape[1]]);\n        yTrain = yTrain.slice([0, 0], [splitIndex, yTrain.shape[1]]);\n      }\n\n      // Training loop\n      for (let epoch = 0; epoch < config.epochs; epoch++) {\n        if (!this.isTraining) break;\n\n        this.currentEpoch = epoch;\n        \n        // Train for one epoch\n        const history = await this.model.fit(xTrain, yTrain, {\n          epochs: 1,\n          batchSize: config.batchSize,\n          validationData: xVal && yVal ? [xVal, yVal] : undefined,\n          verbose: 0\n        });\n\n        const loss = history.history.loss[0] as number;\n        const accuracy = history.history.acc[0] as number;\n        const valLoss = history.history.val_loss ? history.history.val_loss[0] as number : undefined;\n        const valAccuracy = history.history.val_acc ? history.history.val_acc[0] as number : undefined;\n\n        const progress: TrainingProgress = {\n          epoch: epoch + 1,\n          loss,\n          accuracy,\n          valLoss,\n          valAccuracy,\n          progress: ((epoch + 1) / config.epochs) * 100\n        };\n\n        this.trainingHistory.push(progress);\n\n        // Call progress callback\n        if (onProgress) {\n          onProgress(progress);\n        }\n\n        // Early stopping check\n        if (config.earlyStopping && config.patience) {\n          if (this.shouldStopEarly(config.patience)) {\n            console.log(`Early stopping at epoch ${epoch + 1}`);\n            break;\n          }\n        }\n      }\n\n      const endTime = Date.now();\n      const trainingTime = (endTime - startTime) / 1000;\n\n      // Calculate model metrics\n      const metrics: ModelMetrics = {\n        totalParams: this.model.countParams(),\n        trainableParams: this.model.trainableParams,\n        nonTrainableParams: this.model.nonTrainableParams,\n        modelSize: this.calculateModelSize(),\n        trainingTime,\n        finalAccuracy: this.trainingHistory[this.trainingHistory.length - 1]?.accuracy || 0,\n        finalLoss: this.trainingHistory[this.trainingHistory.length - 1]?.loss || 0\n      };\n\n      return metrics;\n\n    } finally {\n      this.isTraining = false;\n      // Clean up tensors\n      xTrain.dispose();\n      yTrain.dispose();\n      if (xVal) xVal.dispose();\n      if (yVal) yVal.dispose();\n    }\n  }\n\n  /**\n   * Pause training\n   */\n  pauseTraining(): void {\n    this.isTraining = false;\n  }\n\n  /**\n   * Resume training\n   */\n  resumeTraining(): void {\n    this.isTraining = true;\n  }\n\n  /**\n   * Stop training\n   */\n  stopTraining(): void {\n    this.isTraining = false;\n  }\n\n  /**\n   * Get training history\n   */\n  getTrainingHistory(): TrainingProgress[] {\n    return [...this.trainingHistory];\n  }\n\n  /**\n   * Save model\n   */\n  async saveModel(path: string): Promise<void> {\n    if (!this.model) {\n      throw new Error('No model to save');\n    }\n    await this.model.save(`file://${path}`);\n  }\n\n  /**\n   * Load model\n   */\n  async loadModel(path: string): Promise<void> {\n    this.model = await tf.loadLayersModel(`file://${path}`);\n  }\n\n  /**\n   * Get model summary\n   */\n  getModelSummary(): string {\n    if (!this.model) {\n      return 'No model loaded';\n    }\n    return this.model.summary();\n  }\n\n  /**\n   * Predict with the model\n   */\n  predict(input: tf.Tensor): tf.Tensor {\n    if (!this.model) {\n      throw new Error('No model loaded');\n    }\n    return this.model.predict(input) as tf.Tensor;\n  }\n\n  /**\n   * Dispose of the model and free memory\n   */\n  dispose(): void {\n    if (this.model) {\n      this.model.dispose();\n      this.model = null;\n    }\n    this.trainingHistory = [];\n  }\n\n  private shouldStopEarly(patience: number): boolean {\n    if (this.trainingHistory.length < patience + 1) {\n      return false;\n    }\n\n    const recentHistory = this.trainingHistory.slice(-patience - 1);\n    const bestValLoss = Math.min(...recentHistory.map(h => h.valLoss || h.loss));\n    const currentValLoss = recentHistory[recentHistory.length - 1].valLoss || recentHistory[recentHistory.length - 1].loss;\n\n    return currentValLoss > bestValLoss;\n  }\n\n  private calculateModelSize(): number {\n    if (!this.model) return 0;\n    \n    // Rough estimation of model size in MB\n    const totalParams = this.model.countParams();\n    const bytesPerParam = 4; // Assuming float32\n    const totalBytes = totalParams * bytesPerParam;\n    return totalBytes / (1024 * 1024); // Convert to MB\n  }\n}\n\n// Export singleton instance\nexport const tensorFlowEngine = new TensorFlowTrainingEngine();","import React, { useState, useEffect } from 'react';\nimport { ModernCard } from './ui/ModernCard';\nimport { SlimBadge } from './ui/SlimBadge';\nimport { Progress } from './ui/Progress';\nimport { Button } from './ui/Button';\nimport { trainingService } from '../services/training';\nimport { tensorFlowEngine, TensorFlowTrainingConfig, TrainingProgress } from '../services/ai/TensorFlowIntegration';\nimport * as tf from '@tensorflow/tfjs';\nimport { \n  Play, \n  Pause, \n  Square, \n  Settings, \n  Brain, \n  Database,\n  Clock,\n  Target,\n  Zap,\n  Plus,\n  Eye,\n  Download,\n  TrendingUp,\n  BarChart3,\n  Activity,\n  CheckCircle,\n  AlertCircle,\n  RefreshCw\n} from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\n\n// Enhanced Training Management Component with Real API Integration\nexport default function TrainingManagement() {\n  const [trainingSessions, setTrainingSessions] = useState<any[]>([]);\n  const [models, setModels] = useState<any[]>([]);\n  const [datasets, setDatasets] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedModel, setSelectedModel] = useState<any>(null);\n  const [trainingConfig, setTrainingConfig] = useState<TensorFlowTrainingConfig>({\n    epochs: 50,\n    batchSize: 32,\n    learningRate: 0.001,\n    validationSplit: 0.2,\n    earlyStopping: true,\n    patience: 5\n  });\n  const [isTraining, setIsTraining] = useState(false);\n  const [trainingProgress, setTrainingProgress] = useState<TrainingProgress | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  // Load initial data\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Load models, datasets, and training sessions\n      const [modelsData, datasetsData, sessionsData] = await Promise.all([\n        trainingService.getModels(),\n        trainingService.getDatasets(),\n        trainingService.getTrainingSessions()\n      ]);\n      \n      setModels(modelsData.models || []);\n      setDatasets(datasetsData.datasets || []);\n      setTrainingSessions(sessionsData || []);\n    } catch (err) {\n      console.error('Failed to load training data:', err);\n      setError('خطا در بارگذاری داده‌ها');\n      // Use mock data as fallback\n      setTrainingSessions(MOCK_TRAINING_SESSIONS);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStartTraining = async (modelId: number) => {\n    try {\n      setIsTraining(true);\n      setTrainingProgress(null);\n      \n      const result = await trainingService.startTraining(modelId, {\n        epochs: trainingConfig.epochs,\n        batchSize: trainingConfig.batchSize,\n        learningRate: trainingConfig.learningRate,\n        validationSplit: trainingConfig.validationSplit,\n        earlyStopping: trainingConfig.earlyStopping,\n        patience: trainingConfig.patience\n      });\n      \n      if (result.success) {\n        // Start TensorFlow training with progress tracking\n        await startTensorFlowTraining(modelId, trainingConfig);\n      }\n    } catch (err) {\n      console.error('Failed to start training:', err);\n      setError('خطا در شروع آموزش');\n    }\n  };\n\n  const startTensorFlowTraining = async (modelId: number, config: TensorFlowTrainingConfig) => {\n    try {\n      // Create model\n      const model = tensorFlowEngine.createModel(config);\n      \n      // Generate mock training data (in real implementation, this would come from datasets)\n      const xTrain = tf.randomNormal([1000, 768]); // Mock BERT embeddings\n      const yTrain = tf.oneHot(tf.randomUniform([1000], 0, 10, 'int32'), 10);\n      \n      // Train with progress tracking\n      const metrics = await tensorFlowEngine.trainModel(\n        xTrain,\n        yTrain,\n        config,\n        (progress) => {\n          setTrainingProgress(progress);\n        }\n      );\n      \n      console.log('Training completed:', metrics);\n      setIsTraining(false);\n      setTrainingProgress(null);\n      \n      // Refresh data\n      await loadData();\n    } catch (err) {\n      console.error('TensorFlow training failed:', err);\n      setError('خطا در آموزش TensorFlow');\n      setIsTraining(false);\n    }\n  };\n\n  const handlePauseTraining = async (modelId: number) => {\n    try {\n      await trainingService.pauseTraining(modelId);\n      tensorFlowEngine.pauseTraining();\n      await loadData();\n    } catch (err) {\n      console.error('Failed to pause training:', err);\n      setError('خطا در توقف آموزش');\n    }\n  };\n\n  const handleResumeTraining = async (modelId: number) => {\n    try {\n      await trainingService.resumeTraining(modelId);\n      tensorFlowEngine.resumeTraining();\n      await loadData();\n    } catch (err) {\n      console.error('Failed to resume training:', err);\n      setError('خطا در ادامه آموزش');\n    }\n  };\n\n  const handleStopTraining = async (modelId: number) => {\n    try {\n      await trainingService.stopTraining(modelId);\n      tensorFlowEngine.stopTraining();\n      setIsTraining(false);\n      setTrainingProgress(null);\n      await loadData();\n    } catch (err) {\n      console.error('Failed to stop training:', err);\n      setError('خطا در متوقف کردن آموزش');\n    }\n  };\n\n// Mock Data برای Training Management (fallback)\nconst MOCK_TRAINING_SESSIONS = [\n  {\n    id: 1,\n    model_name: 'Persian BERT Legal v3.0',\n    model_type: 'persian-bert',\n    dataset: 'Legal QA Persian Extended',\n    status: 'training',\n    progress: 64,\n    current_epoch: 32,\n    total_epochs: 50,\n    accuracy: 0.89,\n    loss: 0.23,\n    learning_rate: 0.001,\n    batch_size: 32,\n    estimated_completion: '2h 15m',\n    elapsed_time: '1h 45m',\n    started_at: new Date(Date.now() - 6300000).toISOString(),\n    gpu_usage: 85,\n    memory_usage: 12.4\n  },\n  {\n    id: 2,\n    model_name: 'Contract Analyzer Pro',\n    model_type: 'dora',\n    dataset: 'Contract Analysis Dataset',\n    status: 'training',\n    progress: 28,\n    current_epoch: 14,\n    total_epochs: 50,\n    accuracy: 0.76,\n    loss: 0.45,\n    learning_rate: 0.0005,\n    batch_size: 16,\n    estimated_completion: '4h 30m',\n    elapsed_time: '1h 20m',\n    started_at: new Date(Date.now() - 4800000).toISOString(),\n    gpu_usage: 72,\n    memory_usage: 8.2\n  },\n  {\n    id: 3,\n    model_name: 'Legal Document Classifier',\n    model_type: 'qr-adaptor',\n    dataset: 'Legal Documents Collection',\n    status: 'paused',\n    progress: 45,\n    current_epoch: 18,\n    total_epochs: 40,\n    accuracy: 0.82,\n    loss: 0.31,\n    learning_rate: 0.002,\n    batch_size: 64,\n    estimated_completion: 'متوقف شده',\n    elapsed_time: '2h 10m',\n    started_at: new Date(Date.now() - 8400000).toISOString(),\n    gpu_usage: 0,\n    memory_usage: 0\n  }\n];\n\nconst MOCK_TRAINING_QUEUE = [\n  {\n    id: 4,\n    model_name: 'Case Law Predictor v2',\n    model_type: 'persian-bert',\n    dataset: 'Case Law Database',\n    priority: 'high',\n    estimated_duration: '6h',\n    scheduled_for: new Date(Date.now() + 3600000).toISOString()\n  },\n  {\n    id: 5,\n    model_name: 'Legal Summarizer',\n    model_type: 'dora',\n    dataset: 'Legal Documents',\n    priority: 'medium',\n    estimated_duration: '4h',\n    scheduled_for: new Date(Date.now() + 7200000).toISOString()\n  }\n];\n\nconst MOCK_TRAINING_HISTORY = Array.from({ length: 10 }, (_, i) => ({\n  date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toLocaleDateString('fa-IR'),\n  sessions: Math.floor(Math.random() * 5) + 1,\n  avg_accuracy: Math.random() * 0.2 + 0.8,\n  total_time: Math.floor(Math.random() * 8) + 2\n}));\n\nconst MOCK_MODEL_PERFORMANCE = [\n  { name: 'Persian BERT', accuracy: 94, training_time: 8.5, efficiency: 92 },\n  { name: 'DORA', accuracy: 89, training_time: 6.2, efficiency: 88 },\n  { name: 'QR Adaptor', accuracy: 85, training_time: 4.8, efficiency: 85 }\n];\n\nconst MOCK_RESOURCE_USAGE = Array.from({ length: 24 }, (_, i) => ({\n  hour: `${i}:00`,\n  gpu_usage: Math.floor(Math.random() * 40) + 30,\n  memory_usage: Math.floor(Math.random() * 30) + 40,\n  cpu_usage: Math.floor(Math.random() * 25) + 25\n}));\n\n  // Update active sessions when training sessions change\n  useEffect(() => {\n    setActiveSessions(trainingSessions.filter(session => \n      session.status === 'training' || session.status === 'paused'\n    ));\n  }, [trainingSessions]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'training': return 'info';\n      case 'paused': return 'warning';\n      case 'completed': return 'success';\n      case 'failed': return 'error';\n      default: return 'neutral';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'training': return <Play className=\"w-3 h-3\" />;\n      case 'paused': return <Pause className=\"w-3 h-3\" />;\n      case 'completed': return <CheckCircle className=\"w-3 h-3\" />;\n      case 'failed': return <AlertCircle className=\"w-3 h-3\" />;\n      default: return <Clock className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'training': return 'در حال آموزش';\n      case 'paused': return 'متوقف شده';\n      case 'completed': return 'تکمیل شده';\n      case 'failed': return 'ناموفق';\n      default: return 'نامشخص';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'error';\n      case 'medium': return 'warning';\n      case 'low': return 'neutral';\n      default: return 'neutral';\n    }\n  };\n\n  // آمار کلی\n  const stats = {\n    active: activeSessions.filter(s => s.status === 'training').length,\n    paused: activeSessions.filter(s => s.status === 'paused').length,\n    queued: trainingQueue.length,\n    avgAccuracy: activeSessions.reduce((sum, s) => sum + s.accuracy, 0) / activeSessions.length * 100,\n    totalGpuUsage: activeSessions.reduce((sum, s) => sum + s.gpu_usage, 0),\n    totalMemoryUsage: activeSessions.reduce((sum, s) => sum + s.memory_usage, 0)\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-light text-slate-900 dark:text-slate-100 mb-2\">\n              آموزش مدل‌ها\n            </h1>\n            <p className=\"text-lg text-slate-600 dark:text-slate-400\">\n              مدیریت و نظارت بر فرآیند آموزش مدل‌های هوش مصنوعی\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"outline\" className=\"rounded-xl\">\n              <Settings className=\"w-4 h-4 ml-2\" />\n              تنظیمات آموزش\n            </Button>\n            <Button onClick={() => setShowCreateModal(true)} className=\"rounded-xl bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700\">\n              <Plus className=\"w-4 h-4 ml-2\" />\n              آموزش جدید\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-blue-400 to-blue-600 rounded-2xl mb-4\">\n              <Activity className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.active}</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">در حال آموزش</p>\n            <div className=\"mt-2\">\n              <SlimBadge variant=\"info\" size=\"xs\">فعال</SlimBadge>\n            </div>\n          </ModernCard>\n\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-2xl mb-4\">\n              <Target className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.avgAccuracy.toFixed(1)}%</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">میانگین دقت</p>\n            <div className=\"flex items-center justify-center gap-1 mt-2\">\n              <TrendingUp className=\"w-4 h-4 text-emerald-500\" />\n              <span className=\"text-sm text-emerald-600\">+2.3%</span>\n            </div>\n          </ModernCard>\n\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-purple-400 to-purple-600 rounded-2xl mb-4\">\n              <Zap className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.totalGpuUsage}%</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">استفاده GPU</p>\n            <div className=\"mt-2\">\n              <SlimBadge variant={stats.totalGpuUsage > 80 ? 'warning' : 'success'} size=\"xs\">\n                {stats.totalGpuUsage > 80 ? 'بالا' : 'نرمال'}\n              </SlimBadge>\n            </div>\n          </ModernCard>\n\n          <ModernCard variant=\"elevated\" className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-14 h-14 bg-gradient-to-br from-amber-400 to-amber-600 rounded-2xl mb-4\">\n              <Clock className=\"w-7 h-7 text-white\" />\n            </div>\n            <h3 className=\"text-3xl font-bold text-slate-900 dark:text-slate-100 mb-1\">{stats.queued}</h3>\n            <p className=\"text-slate-600 dark:text-slate-400\">در صف انتظار</p>\n            <div className=\"mt-2\">\n              <SlimBadge variant=\"neutral\" size=\"xs\">آماده</SlimBadge>\n            </div>\n          </ModernCard>\n        </div>\n\n        {/* Active Training Sessions */}\n        <ModernCard variant=\"outlined\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n              <Brain className=\"w-5 h-5 text-purple-500\" />\n              جلسات آموزش فعال\n            </h3>\n            <SlimBadge variant=\"info\">{stats.active} فعال</SlimBadge>\n          </div>\n          <div className=\"space-y-6\">\n            {activeSessions.map((session) => (\n              <div key={session.id} className=\"p-6 bg-slate-50 dark:bg-slate-800 rounded-xl\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-purple-400 to-purple-600 rounded-xl flex items-center justify-center\">\n                      <Brain className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-slate-900 dark:text-slate-100\">\n                        {session.model_name}\n                      </h4>\n                      <p className=\"text-slate-600 dark:text-slate-400\">\n                        {session.model_type} • {session.dataset}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <SlimBadge variant={getStatusColor(session.status)}>\n                      {getStatusIcon(session.status)}\n                      {getStatusText(session.status)}\n                    </SlimBadge>\n                  </div>\n                </div>\n\n                {/* Progress */}\n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">پیشرفت آموزش</span>\n                    <span className=\"font-medium\">{session.current_epoch}/{session.total_epochs} epochs</span>\n                  </div>\n                  <Progress value={session.progress} className=\"h-3\" />\n                  <div className=\"flex justify-between text-xs text-slate-500\">\n                    <span>دقت: {(session.accuracy * 100).toFixed(1)}%</span>\n                    <span>خطا: {session.loss.toFixed(3)}</span>\n                    <span>زمان باقی‌مانده: {session.estimated_completion}</span>\n                  </div>\n                </div>\n\n                {/* Stats Grid */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.learning_rate}</div>\n                    <div className=\"text-xs text-slate-500\">Learning Rate</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.batch_size}</div>\n                    <div className=\"text-xs text-slate-500\">Batch Size</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.gpu_usage}%</div>\n                    <div className=\"text-xs text-slate-500\">GPU Usage</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-white dark:bg-slate-700 rounded-lg\">\n                    <div className=\"text-lg font-bold text-slate-900 dark:text-slate-100\">{session.memory_usage}GB</div>\n                    <div className=\"text-xs text-slate-500\">Memory</div>\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center gap-3\">\n                  {session.status === 'training' && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"rounded-lg\"\n                      onClick={() => handlePauseTraining(session.id)}\n                    >\n                      <Pause className=\"w-3 h-3 ml-1\" />\n                      توقف\n                    </Button>\n                  )}\n                  {session.status === 'paused' && (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"rounded-lg\"\n                      onClick={() => handleResumeTraining(session.id)}\n                    >\n                      <Play className=\"w-3 h-3 ml-1\" />\n                      ادامه\n                    </Button>\n                  )}\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"rounded-lg\"\n                    onClick={() => handleStopTraining(session.id)}\n                    disabled={session.status === 'completed'}\n                  >\n                    <Square className=\"w-3 h-3 ml-1\" />\n                    توقف کامل\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"rounded-lg\">\n                    <Eye className=\"w-3 h-3 ml-1\" />\n                    جزئیات\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"rounded-lg\">\n                    <Settings className=\"w-3 h-3 ml-1\" />\n                    تنظیمات\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ModernCard>\n\n        {/* Training Progress Display */}\n        {isTraining && trainingProgress && (\n          <ModernCard variant=\"outlined\" className=\"mb-8\">\n            <div className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2\">\n                <Activity className=\"w-5 h-5 text-green-500\" />\n                پیشرفت آموزش\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{trainingProgress.epoch}</div>\n                  <div className=\"text-sm text-slate-600\">دوره فعلی</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{(trainingProgress.accuracy * 100).toFixed(1)}%</div>\n                  <div className=\"text-sm text-slate-600\">دقت</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">{trainingProgress.loss.toFixed(3)}</div>\n                  <div className=\"text-sm text-slate-600\">خطا</div>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <Progress value={trainingProgress.progress} className=\"h-2\" />\n                <div className=\"text-sm text-slate-600 mt-2 text-center\">\n                  {trainingProgress.progress.toFixed(1)}% تکمیل شده\n                </div>\n              </div>\n            </div>\n          </ModernCard>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <ModernCard variant=\"outlined\" className=\"mb-8 border-red-200 bg-red-50\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center gap-2 text-red-600\">\n                <AlertCircle className=\"w-5 h-5\" />\n                <span className=\"font-medium\">خطا</span>\n              </div>\n              <p className=\"text-red-700 mt-2\">{error}</p>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"mt-3\"\n                onClick={() => setError(null)}\n              >\n                بستن\n              </Button>\n            </div>\n          </ModernCard>\n        )}\n\n        {/* Charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Training History */}\n          <ModernCard variant=\"outlined\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-blue-500\" />\n                تاریخچه آموزش\n              </h3>\n              <SlimBadge variant=\"neutral\">10 روز گذشته</SlimBadge>\n            </div>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={MOCK_TRAINING_HISTORY.slice().reverse()}>\n                  <defs>\n                    <linearGradient id=\"sessionsGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n                      <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n                  <XAxis \n                    dataKey=\"date\" \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'white',\n                      border: '1px solid #e2e8f0',\n                      borderRadius: '12px'\n                    }}\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"sessions\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    fill=\"url(#sessionsGradient)\"\n                    name=\"جلسات آموزش\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </ModernCard>\n\n          {/* Resource Usage */}\n          <ModernCard variant=\"outlined\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-purple-500\" />\n                استفاده از منابع\n              </h3>\n              <SlimBadge variant=\"warning\">زنده</SlimBadge>\n            </div>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={MOCK_RESOURCE_USAGE.slice(-12)}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n                  <XAxis \n                    dataKey=\"hour\" \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <YAxis \n                    tick={{ fontSize: 12 }}\n                    stroke=\"#64748b\"\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: 'white',\n                      border: '1px solid #e2e8f0',\n                      borderRadius: '12px'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"gpu_usage\" \n                    stroke=\"#8b5cf6\" \n                    strokeWidth={2}\n                    name=\"GPU (%)\"\n                    dot={false}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"memory_usage\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    name=\"Memory (%)\"\n                    dot={false}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </ModernCard>\n        </div>\n\n        {/* Training Queue */}\n        <ModernCard variant=\"outlined\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100 flex items-center gap-2\">\n              <Clock className=\"w-5 h-5 text-amber-500\" />\n              صف آموزش\n            </h3>\n            <SlimBadge variant=\"neutral\">{trainingQueue.length} در انتظار</SlimBadge>\n          </div>\n          <div className=\"space-y-4\">\n            {trainingQueue.map((item) => (\n              <div key={item.id} className=\"flex items-center justify-between p-4 bg-slate-50 dark:bg-slate-800 rounded-xl\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-10 h-10 bg-amber-100 dark:bg-amber-900/30 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"w-5 h-5 text-amber-600 dark:text-amber-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 dark:text-slate-100\">{item.model_name}</h4>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      {item.model_type} • {item.dataset}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <SlimBadge variant={getPriorityColor(item.priority)} size=\"sm\">\n                    {item.priority === 'high' ? 'اولویت بالا' : \n                     item.priority === 'medium' ? 'اولویت متوسط' : 'اولویت پایین'}\n                  </SlimBadge>\n                  <div className=\"text-sm text-slate-500\">\n                    زمان تخمینی: {item.estimated_duration}\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\" className=\"rounded-lg\">\n                    <Play className=\"w-3 h-3 ml-1\" />\n                    شروع فوری\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ModernCard>\n\n        {/* Create Training Modal Placeholder */}\n        {showCreateModal && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n            <ModernCard className=\"w-full max-w-2xl\">\n              <div className=\"p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\">شروع آموزش جدید</h3>\n                <p className=\"text-slate-600 mb-6\">فرم ایجاد جلسه آموزش در حال توسعه است...</p>\n                <div className=\"flex justify-end gap-3\">\n                  <Button variant=\"outline\" onClick={() => setShowCreateModal(false)}>\n                    انصراف\n                  </Button>\n                  <Button onClick={() => setShowCreateModal(false)}>\n                    شروع آموزش\n                  </Button>\n                </div>\n              </div>\n            </ModernCard>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["tensorFlowEngine","constructor","this","model","trainingHistory","isTraining","currentEpoch","totalEpochs","ready","then","console","log","createModel","config","tf.sequential","layers","length","forEach","layerConfig","type","add","tf.layers.dense","units","activation","inputShape","tf.layers.dropout","rate","dropout","tf.layers.batchNormalization","compile","optimizer","tf.train","adam","learningRate","loss","metrics","trainModel","xTrain","yTrain","onProgress","Error","epochs","startTime","Date","now","xVal","yVal","validationSplit","splitIndex","Math","floor","shape","slice","epoch","history","fit","batchSize","validationData","verbose","accuracy","acc","valLoss","val_loss","progress","valAccuracy","val_acc","push","earlyStopping","patience","shouldStopEarly","trainingTime","totalParams","countParams","trainableParams","nonTrainableParams","modelSize","calculateModelSize","finalAccuracy","_a","finalLoss","_b","dispose","pauseTraining","resumeTraining","stopTraining","getTrainingHistory","saveModel","path","save","loadModel","tf.loadLayersModel","getModelSummary","summary","predict","input","recentHistory","bestValLoss","min","map","h","TrainingManagement","trainingSessions","setTrainingSessions","useState","models","setModels","datasets","setDatasets","loading","setLoading","error","setError","setIsTraining","trainingProgress","setTrainingProgress","showCreateModal","setShowCreateModal","useEffect","loadData","async","modelsData","datasetsData","sessionsData","Promise","all","trainingService","getModels","getDatasets","getTrainingSessions","err","MOCK_TRAINING_SESSIONS","id","model_name","model_type","dataset","status","current_epoch","total_epochs","learning_rate","batch_size","estimated_completion","elapsed_time","started_at","toISOString","gpu_usage","memory_usage","MOCK_TRAINING_HISTORY","Array","from","_","i","date","toLocaleDateString","sessions","random","avg_accuracy","total_time","MOCK_RESOURCE_USAGE","hour","cpu_usage","setActiveSessions","filter","session","getStatusColor","getStatusIcon","jsx","Play","className","Pause","CheckCircle","AlertCircle","Clock","getStatusText","getPriorityColor","priority","stats","active","activeSessions","s","paused","queued","trainingQueue","avgAccuracy","reduce","sum","totalGpuUsage","totalMemoryUsage","children","jsxs","Button","variant","Settings","onClick","Plus","ModernCard","Activity","SlimBadge","size","Target","toFixed","TrendingUp","Zap","jsxRuntimeExports","Brain","Progress","value","modelId","handlePauseTraining","handleResumeTraining","handleStopTraining","disabled","Square","Eye","BarChart3","ResponsiveContainer","width","height","AreaChart","data","reverse","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","tick","fontSize","YAxis","Tooltip","contentStyle","backgroundColor","border","borderRadius","Area","strokeWidth","fill","name","LineChart","Line","dot","item","estimated_duration"],"mappings":"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"}