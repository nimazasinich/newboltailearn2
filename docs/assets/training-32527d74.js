import{a as t,hW as e,hX as r,A as o}from"./index-d33cfd8d.js";const a={async getModels(a=1,n=10){try{const s=new URLSearchParams({page:a.toString(),limit:n.toString()}),i=await t(e(r,`${o.MODELS}?${s.toString()}`));return await i.json()}catch(s){return console.error("Get models failed:",s),{models:[],pagination:{page:a,limit:n,total:0,pages:0}}}},async getModel(a){try{const n=await t(e(r,o.MODEL_BY_ID(a.toString())));return await n.json()}catch(n){return console.error("Get model failed:",n),{id:a,name:"مدل پیش‌فرض",type:"persian-bert",status:"idle",accuracy:0,loss:0,epochs:0,currentEpoch:0,datasetId:"",config:{},createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()}}},async createModel(a){try{const n=await t(e(r,o.MODELS),{method:"POST",body:JSON.stringify(a)});return await n.json()}catch(n){return console.error("Create model failed:",n),{id:Date.now(),name:a.name,type:a.type,status:"idle",accuracy:0,loss:0,epochs:0,currentEpoch:0,datasetId:a.datasetId||"",config:a.config||{},createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()}}},async updateModel(o,a){try{return await t(e(r,`/models/${o}`),{method:"PUT",body:JSON.stringify(a)})}catch(n){throw console.error("Update model failed:",n),new Error("خطا در به‌روزرسانی مدل")}},async deleteModel(o){try{return await t(e(r,`/models/${o}`),{method:"DELETE"})}catch(a){throw console.error("Delete model failed:",a),new Error("خطا در حذف مدل")}},async startTraining(a,n){try{const s=await t(e(r,o.MODEL_TRAIN(a.toString())),{method:"POST",body:JSON.stringify(n)});return await s.json()}catch(s){return console.error("Start training failed:",s),{success:!0,message:"آموزش در حالت آفلاین شروع شد",sessionId:`session_${Date.now()}`,config:n}}},async pauseTraining(o){try{return await t(e(r,`/models/${o}/pause`),{method:"POST"})}catch(a){throw console.error("Pause training failed:",a),new Error("خطا در توقف آموزش")}},async resumeTraining(o,a){try{return await t(e(r,`/models/${o}/resume`),{method:"POST",body:JSON.stringify(a||{})})}catch(n){throw console.error("Resume training failed:",n),new Error("خطا در ادامه آموزش")}},async getTrainingSessions(o){try{const a=o?`/models/${o}/sessions`:"/training/sessions";return await t(e(r,a))}catch(a){throw console.error("Get training sessions failed:",a),new Error("خطا در دریافت جلسات آموزش")}},async getTrainingSession(o){try{return await t(e(r,`/training/sessions/${o}`))}catch(a){throw console.error("Get training session failed:",a),new Error("خطا در دریافت جلسه آموزش")}},async getModelLogs(o,a=1,n=50){try{const s=new URLSearchParams({page:a.toString(),limit:n.toString()});return await t(e(r,`/models/${o}/logs?${s.toString()}`))}catch(s){throw console.error("Get model logs failed:",s),new Error("خطا در دریافت لاگ‌های مدل")}},async getModelCheckpoints(o){try{return await t(e(r,`/models/${o}/checkpoints`))}catch(a){throw console.error("Get model checkpoints failed:",a),new Error("خطا در دریافت checkpoint های مدل")}},async startOptimization(o,a={}){try{return await t(e(r,`/models/${o}/optimize`),{method:"POST",body:JSON.stringify(a)})}catch(n){throw console.error("Start optimization failed:",n),new Error("خطا در شروع بهینه‌سازی")}},async loadModel(o,a){try{return await t(e(r,`/models/${o}/load`),{method:"POST",body:JSON.stringify({checkpointPath:a})})}catch(n){throw console.error("Load model failed:",n),new Error("خطا در بارگذاری مدل")}},async getTrainingStats(){try{return await t(e(r,"/training/stats"))}catch(o){return console.error("Get training stats failed:",o),{totalModels:0,activeTraining:0,completedTraining:0,averageAccuracy:0,totalTrainingHours:0}}}};export{a as t};
//# sourceMappingURL=training-32527d74.js.map
